<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1438446558053">{:repl-history {:ide [], :local [&quot;(ns learn.asynclearn)&quot; &quot;(&lt;!! (google \&quot;clojure\&quot;))&quot; &quot;(ns grapproject.core)&quot; &quot;(let [c (chan 10)]\n  (&gt;!! c \&quot;hello\&quot;)\n  (assert (= \&quot;hello\&quot; (&lt;!! c)))\n  (close! c))&quot; &quot;(let [c1 (chan)\n      c2 (chan)]\n  (thread (while true\n            (let [[v ch] (alts!! [c1 c2])]\n              (println \&quot;Read\&quot; v \&quot;from\&quot; ch))))\n  (&gt;!! c1 \&quot;hi\&quot;)\n  (&gt;!! c2 \&quot;there\&quot;))&quot; &quot;(defn addchan []\n  (go (&gt;! ss \&quot;test\&quot;)))\n\n(defn consumechan []\n  (println (go (&lt;! ss))))&quot; &quot;\n(defn addchan []\n  (go (&gt;! ss \&quot;test\&quot;)))\n\n(defn consumechan []\n  (= \&quot;test\&quot; (go (&lt;! ss))))&quot; &quot;(defn consumechan []\n  (= \&quot;test\&quot; (&lt;!! (go (&lt;! ss)))))&quot; &quot;(addchan)&quot; &quot;(consumechan)&quot; &quot;1&quot; &quot;(defn testtest []\n  (consumechan)\n  (addchan))&quot; &quot;(let [c1 (chan)\n      c2 (chan)]\n  (go (while true\n        (let [[v ch] (alts! [c1 c2])]\n          (println \&quot;Read\&quot; v \&quot;from\&quot; ch))))\n  (go (&gt;! c1 \&quot;hi\&quot;))\n  (go (&gt;! c2 \&quot;there\&quot;)))&quot; &quot;(defn addchan []\n  (go (&gt;! ss \&quot;test\&quot;)))\n\n(defn consumechan []\n  (= \&quot;test\&quot; (go (alt! ss))))&quot; &quot;(testtest)&quot; &quot;(go-loop []\n         (&lt;! (timeout 1000))\n         (print (&lt;! trade-ch))\n         (recur))\n\n(go\n  (let [timeout-ch (timeout 1000)\n        trade 100]\n    (-&gt;\n      (alt!\n        [[trade-ch trade]] :sent\n        timeout-ch :timed-out)\n      print))) ;;eval this at will&quot; &quot;\n(def trade-ch (chan))\n\n(go-loop []\n  (&lt;! (timeout 1000))\n  (print (&lt;! trade-ch))\n  (recur))\n\n(go\n  (let [timeout-ch (timeout 1000)\n        trade 100]\n    (-&gt;\n      (alt!\n        [[trade-ch trade]] :sent\n        timeout-ch :timed-out)\n      print))) ;;eval this at will&quot; &quot;(go-loop)&quot;], :remote []}}</component>
</project>