<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="dc780e7a-1e24-472c-bf50-b9198d816e36" name="Default" comment="">
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/.idea/workspace.xml" afterPath="$PROJECT_DIR$/.idea/workspace.xml" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/grapdata/core.clj" afterPath="$PROJECT_DIR$/src/grapdata/core.clj" />
      <change type="MOVED" beforePath="$PROJECT_DIR$/src/ave40/article.clj" afterPath="$PROJECT_DIR$/src/grapdata/ave40/article.clj" />
      <change type="MOVED" beforePath="$PROJECT_DIR$/src/ave40/db.clj" afterPath="$PROJECT_DIR$/src/grapdata/ave40/db.clj" />
      <change type="MOVED" beforePath="$PROJECT_DIR$/src/ave40/extra.clj" afterPath="$PROJECT_DIR$/src/grapdata/ave40/extra.clj" />
      <change type="MOVED" beforePath="$PROJECT_DIR$/src/ave40/grap_article.clj" afterPath="$PROJECT_DIR$/src/grapdata/ave40/grap_article.clj" />
      <change type="MOVED" beforePath="$PROJECT_DIR$/src/ave40/grap_image.clj" afterPath="$PROJECT_DIR$/src/grapdata/ave40/grap_image.clj" />
      <change type="MOVED" beforePath="$PROJECT_DIR$/src/ave40/manager.clj" afterPath="$PROJECT_DIR$/src/grapdata/ave40/manager.clj" />
      <change type="MOVED" beforePath="$PROJECT_DIR$/src/ave40/push.clj" afterPath="$PROJECT_DIR$/src/grapdata/ave40/push.clj" />
      <change type="MOVED" beforePath="$PROJECT_DIR$/src/ave40/spinner.clj" afterPath="$PROJECT_DIR$/src/grapdata/ave40/spinner.clj" />
      <change type="MOVED" beforePath="$PROJECT_DIR$/src/ave40/utils.clj" afterPath="$PROJECT_DIR$/src/grapdata/ave40/utils.clj" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file leaf-file-name="extra.clj" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/extra.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="664">
              <caret line="55" column="38" lean-forward="true" selection-start-line="55" selection-start-column="38" selection-end-line="55" selection-end-column="38" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="spinner.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/spinner.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="628">
              <caret line="95" column="22" lean-forward="true" selection-start-line="95" selection-start-column="22" selection-end-line="95" selection-end-column="22" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="article.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/article.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="772">
              <caret line="62" column="0" lean-forward="true" selection-start-line="62" selection-start-column="0" selection-end-line="62" selection-end-column="0" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="push.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/push.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="772">
              <caret line="62" column="0" lean-forward="true" selection-start-line="62" selection-start-column="0" selection-end-line="62" selection-end-column="0" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="grap_article.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/grap_article.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="390">
              <caret line="167" column="53" lean-forward="true" selection-start-line="167" selection-start-column="53" selection-end-line="167" selection-end-column="53" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>thro</find>
      <find>data-insert!</find>
    </findStrings>
    <dirStrings>
      <dir>E:\grapdata\src\ave40</dir>
    </dirStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GradleLocalSettings">
    <option name="externalProjectsViewState">
      <projects_view />
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/ave40/article.clj" />
        <option value="$PROJECT_DIR$/src/ave40/utils.clj" />
        <option value="$PROJECT_DIR$/src/ave40/push.clj" />
        <option value="$PROJECT_DIR$/src/ave40/spinner.clj" />
        <option value="$PROJECT_DIR$/src/ave40/grap_article.clj" />
        <option value="$PROJECT_DIR$/src/ave40/extra.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/ave40/db.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/ave40/utils.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/core.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/ave40/grap_image.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/ave40/manager.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/ave40/spinner.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/ave40/grap_article.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/ave40/article.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/ave40/push.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/ave40/extra.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="260" />
    <option name="y" value="20" />
    <option name="width" value="1400" />
    <option name="height" value="1000" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
      <flattenPackages />
      <showMembers />
      <showModules />
      <showLibraryContents />
      <hideEmptyPackages />
      <abbreviatePackageNames />
      <autoscrollToSource />
      <autoscrollFromSource />
      <sortByType />
      <manualOrder />
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="AndroidView" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="grapdata" type="b2602c69:ProjectViewProjectNode" />
              <item name="grapdata" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="grapdata" type="b2602c69:ProjectViewProjectNode" />
              <item name="grapdata" type="462c0819:PsiDirectoryNode" />
              <item name="resources" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="grapdata" type="b2602c69:ProjectViewProjectNode" />
              <item name="grapdata" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="grapdata" type="b2602c69:ProjectViewProjectNode" />
              <item name="grapdata" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="grapdata" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="grapdata" type="b2602c69:ProjectViewProjectNode" />
              <item name="grapdata" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="learn" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scratches" />
    </panes>
  </component>
  <component name="RecentsManager">
    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
      <recent name="grapdata" />
    </key>
  </component>
  <component name="ReplState" timestamp="1508140060558">{:repl-history {:ide [], :local [{:command &quot;(let [list (map :content (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (apply conj (-&gt; html\n                         (StringReader.)\n                         (enlive/html-resource)\n                         (get-html-node-text)))) list))&quot;, :offset 301, :ns &quot;ave40.extra&quot;} {:command &quot;(let [list (map :content (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (apply cond (map (fn [html]\n                     (-&gt; html\n                         (StringReader.)\n                         (enlive/html-resource)\n                         (get-html-node-text))) list)))&quot;, :offset 313, :ns &quot;ave40.extra&quot;} {:command &quot;(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text))) list))&quot;, :offset 296, :ns &quot;ave40.extra&quot;} {:command &quot;(concat [\&quot;\&quot;] [\&quot;sdfsdf\&quot;])&quot;, :offset 24, :ns &quot;ave40.extra&quot;} {:command &quot;\n(defn- split-trim [s]\n  (map str/trim (str/split s #\&quot;\\n\&quot;)))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (split-trim))) list))&quot;, :offset 384, :ns &quot;ave40.extra&quot;} {:command &quot;(ns ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [ave40.db :refer :all]\n            [ave40.utils :refer :all]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]]\n  (:import (java.io StringReader)))\n\n(defn parse-excel-data [list]\n  (cons (map name (keys (first list))) (map #(vals %) list)))\n\n#_(parse-excel-data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))\n\n#_(let [data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]})\n      wb (sheet/create-workbook \&quot;html\&quot; (parse-excel-data data))]\n  (sheet/save-workbook! \&quot;d:/exponents.xlsx\&quot; wb))\n\n(defn- split-trim [s]\n  (map str/trim (str/split s #\&quot;\\n\&quot;)))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (split-trim))) list))\n&quot;, :offset 1056, :ns &quot;grapdata.core&quot;} {:command &quot;(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             )) \n       list))&quot;, :offset 318, :ns &quot;ave40.extra&quot;} {:command &quot;(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(map split-trim %)))) \n       list))&quot;, :offset 339, :ns &quot;ave40.extra&quot;} {:command &quot;(if \&quot;\&quot; 1)&quot;, :offset 9, :ns &quot;ave40.extra&quot;} {:command &quot;(if (empty? \&quot;\&quot;) 1)&quot;, :offset 18, :ns &quot;ave40.extra&quot;} {:command &quot;(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(if (not-empty %) (map split-trim %)))))\n       list))&quot;, :offset 357, :ns &quot;ave40.extra&quot;} {:command &quot;(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (concat)\n             #_(#(if (not-empty %) (map split-trim %)))))\n       list))&quot;, :offset 381, :ns &quot;ave40.extra&quot;} {:command &quot;(if (not-empty \&quot;\&quot;) 1)&quot;, :offset 21, :ns &quot;ave40.extra&quot;} {:command &quot;(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(map (fn [n] (if (not-empty n) (split-trim n))) %))))\n       list))&quot;, :offset 370, :ns &quot;ave40.extra&quot;} {:command &quot;(concat [[\&quot;\&quot;]] [[\&quot;asdasd\&quot; \&quot;asd\&quot;]] [\&quot;sdfdf\&quot;])&quot;, :offset 44, :ns &quot;ave40.extra&quot;} {:command &quot;(defn- split-trim [s]\n  (apply concat (map str/trim (str/split s #\&quot;\\n\&quot;))))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(map split-trim %))))\n       list))\n&quot;, :offset 415, :ns &quot;ave40.extra&quot;} {:command &quot;(defn- split-trim [s]\n  (concat (map str/trim (str/split s #\&quot;\\n\&quot;))))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(map split-trim %))))\n       list))\n&quot;, :offset 409, :ns &quot;ave40.extra&quot;} {:command &quot;(defn- split-trim [s]\n  (mapcat str/trim (str/split s #\&quot;\\n\&quot;)))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(map split-trim %))))\n       list))&quot;, :offset 402, :ns &quot;ave40.extra&quot;} {:command &quot;(defn- split-trim [s]\n  (mapcat str/trim (str/split s #\&quot;\\n\&quot;)))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)))\n       list))\n&quot;, :offset 368, :ns &quot;ave40.extra&quot;} {:command &quot;(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (split-trim)))\n       list))&quot;, :offset 329, :ns &quot;ave40.extra&quot;} {:command &quot;(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(map split-trim %))))\n       list))&quot;, :offset 338, :ns &quot;ave40.extra&quot;} {:command &quot;\n(defn- split-trim [s]\n  (map str/trim (str/split s #\&quot;\\n\&quot;)))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(map split-trim %))))\n       list))\n&quot;, :offset 401, :ns &quot;ave40.extra&quot;} {:command &quot;(defn- split-trim [s]\n  (map str/trim (str/split s #\&quot;\\n\&quot;)))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(mapcat split-trim %))\n             (mapcat)))\n       list))\n&quot;, :offset 425, :ns &quot;ave40.extra&quot;} {:command &quot;\n(defn- split-trim [s]\n  (mapcat str/trim (str/split s #\&quot;\\n\&quot;)))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(mapcat split-trim %))))\n       list))\n&quot;, :offset 407, :ns &quot;ave40.extra&quot;} {:command &quot;(defn- split-trim [s]\n  (map str/trim (str/split s #\&quot;\\n\&quot;)))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(mapcat split-trim %))))\n       list))\n&quot;, :offset 403, :ns &quot;ave40.extra&quot;} {:command &quot;(defn- split-trim [s]\n  (map (fn [pie]\n         (let [temp (str/trim pie)]\n           (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;)))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(mapcat split-trim %))))\n       list))\n&quot;, :offset 481, :ns &quot;ave40.extra&quot;} {:command &quot;\n(defn- split-trim [s]\n  (filter nil? (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(mapcat split-trim %))))\n       list))\n&quot;, :offset 512, :ns &quot;ave40.extra&quot;} {:command &quot;(defn- split-trim [s]\n  (filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(mapcat split-trim %))))\n       list))\n&quot;, :offset 516, :ns &quot;ave40.extra&quot;} {:command &quot;(defn- split-trim [s]\n  (filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(mapcat split-trim %))\n             (concat)))\n       list))\n&quot;, :offset 538, :ns &quot;ave40.extra&quot;} {:command &quot;(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(mapcat split-trim %))\n             (#(apply concat %))))\n       list))\n&quot;, :offset 375, :ns &quot;ave40.extra&quot;} {:command &quot;(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (map (fn [html]\n         (-&gt; html\n             (StringReader.)\n             (enlive/html-resource)\n             (get-html-node-text)\n             (#(mapcat split-trim %))\n             #_(#(apply concat %))))\n       list))&quot;, :offset 376, :ns &quot;ave40.extra&quot;} {:command &quot;(concat [\&quot;111\&quot;] [\&quot;sdf\&quot; \&quot;qw34\&quot;])&quot;, :offset 31, :ns &quot;ave40.extra&quot;} {:command &quot;(concat [[\&quot;111\&quot;] [\&quot;sdf\&quot; \&quot;qw34\&quot;]])&quot;, :offset 33, :ns &quot;ave40.extra&quot;} {:command &quot;(apply concat [[\&quot;111\&quot;] [\&quot;sdf\&quot; \&quot;qw34\&quot;]])&quot;, :offset 39, :ns &quot;ave40.extra&quot;} {:command &quot;(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (apply concat (map (fn [html]\n                       (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource)\n                           (get-html-node-text)\n                           (#(mapcat split-trim %))))\n                     list)))&quot;, :offset 440, :ns &quot;ave40.extra&quot;} {:command &quot;(mapcat #(-&gt; (str/split % #\&quot;|\&quot;)\n             (str/trim))\n        \&quot;TPD  /  Promotion /  Stock /  Giveaways\&quot;)&quot;, :offset 107, :ns &quot;ave40.extra&quot;} {:command &quot;(mapcat #(str/split % #\&quot;|\&quot;)\n        (str/split \&quot;TPD  /  Promotion /  Stock /  Giveaways\&quot; \&quot;|\&quot;))&quot;, :offset 94, :ns &quot;ave40.extra&quot;} {:command &quot;(mapcat #(str/split % #\&quot;|\&quot;)\n        (str/split \&quot;TPD  /  Promotion /  Stock /  Giveaways\&quot; #\&quot;|\&quot;))&quot;, :offset 95, :ns &quot;ave40.extra&quot;} {:command &quot;(mapcat str/trim\n        (str/split \&quot;TPD  /  Promotion /  Stock /  Giveaways\&quot; #\&quot;|\&quot;))&quot;, :offset 84, :ns &quot;ave40.extra&quot;} {:command &quot;(str/split \&quot;TPD  /  Promotion /  Stock /  Giveaways\&quot; #\&quot;|\&quot;)&quot;, :offset 58, :ns &quot;ave40.extra&quot;} {:command &quot;(str/split \&quot;TPD  /  Promotion /  Stock /  Giveaways\&quot; #\&quot;\\|\&quot;)&quot;, :offset 59, :ns &quot;ave40.extra&quot;} {:command &quot;(mapcat str/trim\n        (str/split \&quot;TPD  /  Promotion /  Stock /  Giveaways\&quot; #\&quot;\\|\&quot;))&quot;, :offset 85, :ns &quot;ave40.extra&quot;} {:command &quot;(mapcat str/trim\n        (str/split \&quot;TPD  /  Promotion /  Stock /  Giveaways\&quot; #\&quot;/\&quot;))&quot;, :offset 84, :ns &quot;ave40.extra&quot;} {:command &quot;(str/split \&quot;TPD  /  Promotion /  Stock /  Giveaways\&quot; #\&quot;/\&quot;)&quot;, :offset 58, :ns &quot;ave40.extra&quot;} {:command &quot;(map str/trim\n        (str/split \&quot;TPD  /  Promotion /  Stock /  Giveaways\&quot; #\&quot;/\&quot;))&quot;, :offset 81, :ns &quot;ave40.extra&quot;} {:command &quot;(defn- split-trim [s]\n  (map str/trim\n       (str/split s #\&quot;\\n\&quot;))\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (apply concat (map (fn [html]\n                       (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource)\n                           (get-html-node-text)\n                           (#(mapcat split-trim %))))\n                     list)))\n&quot;, :offset 661, :ns &quot;ave40.extra&quot;} {:command &quot;(map str/trim\n        (str/split \&quot;TPD  /  Promotion /  Stock /  Giveaways\\n \\n sdfsdf \\n\&quot; #\&quot;/\&quot;))&quot;, :offset 96, :ns &quot;ave40.extra&quot;} {:command &quot;(map str/trim\n     (str/split \&quot;TPD  /  Promotion /  Stock /  Giveaways\\n \\n sdfsdf \\n\&quot; #\&quot;\\s+\&quot;))&quot;, :offset 95, :ns &quot;ave40.extra&quot;} {:command &quot;(defn- split-trim [s]\n  (str/split s #\&quot;\\s+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (apply concat (map (fn [html]\n                       (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource)\n                           (get-html-node-text)\n                           (#(mapcat split-trim %))))\n                     list)))&quot;, :offset 639, :ns &quot;ave40.extra&quot;} {:command &quot;(defn- split-trim [s]\n  (str/split s #\&quot;\\n|\\t+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (apply concat (map (fn [html]\n                       (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource)\n                           (get-html-node-text)\n                           (#(mapcat split-trim %))))\n                     list)))\n&quot;, :offset 643, :ns &quot;ave40.extra&quot;} {:command &quot;(ns ave40.push\n  (:require [clj-http.client :as http]\n            [ave40.db :refer :all]\n            [clojure.string :as str]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.walk :as w]\n            [clojure.tools.logging :as log]))\n\n\n\n(defn- push-article\n  \&quot;将文章推送到指定的博客\&quot;\n  [domain {:keys [title article]}]\n  (log/info (str \&quot;pushing to \&quot; domain \&quot;, article: \&quot; title))\n  (println (:body (http/post \&quot;http://manage.ecigview.com/posts/create\&quot;\n                             {:form-params {:domain domain\n                                            :title title\n                                            :content article}}))))\n\n(defn- add-image-to-article\n  \&quot;将图片加到文章中\&quot;\n  [article]\n  (let [url (:source_url (select-rand-image article-db))]\n    (str \&quot;&lt;img src=\\\&quot;\&quot; url \&quot;\\\&quot; style=\\\&quot;display:block;\\\&quot; /&gt;\&quot; article)))\n\n\n(defn- wrap-paragraph [text]\n  \&quot;包裹段落\&quot;\n  (apply str (map #(apply str (enlive/emit* ((enlive/wrap :p) %)))\n                  (str/split text #\&quot;\\n\&quot;))))\n\n(defn patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;ISNULL(post_domain) and not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    (doseq [article-info article-list]\n      (push-article domain {:title (:spinner_title article-info)\n                            :article (add-image-to-article (:spinner_article article-info))})\n      (update-data article-db {:table \&quot;articles\&quot;\n                               :updates {:post_time (quot (System/currentTimeMillis) 1000)\n                                         :post_domain domain}\n                               :where (str \&quot;id=\&quot; (:id article-info))}))))\n\n\n(def domains [\&quot;www.vapinggift.com\&quot;\n              \&quot;www.eciggadget.com\&quot;\n              \&quot;www.ecigsmok.com\&quot;\n              \&quot;www.vapingblog.net\&quot;\n              \&quot;www.eciggod.com\&quot;\n              \&quot;www.vapingpromo.com\&quot;\n              \&quot;www.ecigcommunity.com\&quot;\n              \&quot;www.ecigblog.in\&quot;\n              \&quot;www.vapingblog.in\&quot;\n              \&quot;www.vaping10.com\&quot;\n              \&quot;www.vapinggift.com\&quot;])\n\n(defn do-push []\n  (doseq [domain domains]\n    (patch-push-article domain 10)))\n\n\n&quot;, :offset 2321, :ns &quot;grapdata.core&quot;} {:command &quot;(do-push)&quot;, :offset 9, :ns &quot;ave40.push&quot;} {:command &quot;(ns ave40.grap-article\n  (:require [clj-http.client :as http]\n            [clojure.string :as str]\n            [ave40.db :refer :all]\n            [ave40.utils :refer :all]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.tools.logging :as log]\n            [clojure.walk :as w]\n            [clojure.data])\n  (:import (java.io StringReader)))\n\n\n(def unvisited-urls (ref []))\n(def source-htmls (ref []))\n(def error_records (atom []))\n\n(defn- add-unvisited [url]\n  (if-not (some #{url} @unvisited-urls)\n    (alter unvisited-urls conj url)))\n\n(defn- pop-unvisited []\n  (when-let [url (peek @unvisited-urls)]\n    (alter unvisited-urls pop)\n    url))\n\n(defn- add-source-html [url html]\n  (alter source-htmls conj {:url url :html html :created_at (quot (System/currentTimeMillis) 1000)}))\n\n\n(defn- add-error-records [url error_code error_body]\n  (swap! error_records conj {:url url :error_code error_code :error_body error_body}))\n\n\n(defn- is-visited? [url]\n  (lazy-contains? (map #(:url %) @source-htmls) url))\n\n(defn- visited [url]\n  (let [resp (http/get url)\n        body (:body resp)]\n    (if\n      (= 200 (:status resp))\n      body\n      (add-error-records url (:status resp) body))))\n\n\n; 持久化\n(defn- add-save-watch []\n  (add-watch unvisited-urls :nvu-save-watch\n             (fn [_ _ old new]\n               (if (&lt; (count new) (count old))                ; 删除记录的情况\n                 (if-let [diff (first (clojure.data/diff old new))]\n                   (delete-table-data-by-url\n                     article-db\n                     {:table \&quot;unvisited_urls\&quot;\n                      :urls (remove nil? diff)})))\n               (if (&gt; (count new) (count old))                ; 添加记录的情况\n                 (if-let [diff (first (clojure.data/diff new old))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;unvisited_urls\&quot;\n                      :cols [\&quot;url\&quot;]\n                      :datas (map #(conj [] %) (remove nil? diff))})))))\n\n  (add-watch source-htmls :source-htmls-save-watch\n             (fn [_ _ old new]\n               (if (&gt; (count new) (count old))\n                 (if-let [diff (w/stringify-keys (remove nil? (first (clojure.data/diff new old))))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;source_article\&quot;\n                      :cols (keys (first diff))\n                      :datas (map #(vals %) diff)})))))\n\n  (add-watch error_records :error_records-save-watch\n             (fn [_ _ old new]\n               (if (&gt; (count new) (count old))\n                 (if-let [diff (w/stringify-keys (remove nil? (first (clojure.data/diff new old))))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;error_records\&quot;\n                      :cols (keys (first diff))\n                      :datas (map #(vals %) diff)}))))))\n\n\n(defn- ignore-url [url]\n  (let [up-url (str/upper-case url)]\n    (or (str/ends-with? up-url \&quot;.JPG\&quot;)\n        (str/ends-with? up-url \&quot;.PNG\&quot;)\n        (str/ends-with? up-url \&quot;.GIF\&quot;)\n        (str/ends-with? up-url \&quot;.PDF\&quot;)\n        (str/ends-with? up-url \&quot;.XML\&quot;)\n        (str/ends-with? up-url \&quot;.MP4\&quot;)\n        (str/ends-with? up-url \&quot;.RMVB\&quot;)\n        (not (str/starts-with? url \&quot;https://fr.vapingpost.com\&quot;)))))\n\n(defn- next-url-parser\n  \&quot;解析需要访问的urls\&quot;\n  [html]\n  (-&gt; html\n      (StringReader.)\n      (enlive/html-resource)\n      (enlive/select [:a])\n      ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes)))\n      ((fn [urls]\n         (remove #(or\n                    (nil? %)\n                    (ignore-url %))\n                 urls)))\n      ((fn [urls]\n         (map #(-&gt; %\n                   (str/split #\&quot;#\&quot;)\n                   (first)\n                   ((fn [url] (if (str/ends-with? url \&quot;/\&quot;) url (str url \&quot;/\&quot;)))))\n              urls)))))\n\n(defn- init-data\n  []\n  (let [url-list (select-all article-db {:table \&quot;unvisited_urls\&quot;})\n        html-list (select-all article-db {:table \&quot;source_article\&quot; :cols [\&quot;url\&quot;] :where \&quot;url like 'https://fr.vapingpost.com%'\&quot;})]\n    (dosync (ref-set unvisited-urls (into [] (map #(:url %) url-list))))\n    (dosync (ref-set source-htmls (into [] html-list)))\n    (add-save-watch)))\n\n\n(defn grap-task\n  []\n  (when-let [url (dosync (pop-unvisited))]\n    (try\n      (dosync\n        (when-not (is-visited? url)\n          (log/info (str \&quot;visiting: \&quot; url))\n          (let [html (visited url)]\n            (add-source-html url html)\n            (when-let [next-urls (next-url-parser html)]\n              (doseq [next-url next-urls]\n                (add-unvisited next-url))))))\n      (catch Exception e\n        (log/error e)\n        (add-error-records url nil (str e))))))\n\n(def continue (atom true))\n\n(defn do-grap\n  []\n  (init-data)\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task))))\n\n(defn stop-task []\n  (reset! continue false))\n\n(defn restart-task []\n  (reset! continue true)\n  (do-grap))\n\n(defn first-run-task [url]\n  (dosync (add-unvisited url))\n  (do-grap))\n\n\n;; 简易版本抓取\n(defn simple-grapper [selector next-page-url-generator]\n  (fn [start-page end-page]\n    (for [page (range start-page end-page)]\n      (let [source-url (next-page-url-generator page)\n            urls (-&gt; (http/get source-url)\n                     :body\n                     (StringReader.)\n                     (enlive/html-resource)\n                     (enlive/select selector)\n                     ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes))))]\n        (doseq [url urls]\n          (let [html (-&gt; url\n                         (http/get)\n                         :body)]\n            (dosync (add-source-html url html))))))))\n\n(defn do-simple-grap []\n  (let [grapper (simple-grapper\n                  [:header.entry-header :h2.entry-title :a]\n                  #(str \&quot;http://www.vaporvanity.com/category/news/page/\&quot; %))]\n    (grapper 1 66)))\n&quot;, :offset 5998, :ns &quot;grapdata.core&quot;} {:command &quot;(do-simple-grap)&quot;, :offset 16, :ns &quot;ave40.grap-article&quot;} {:command &quot;(ns ave40.grap-article\n  (:require [clj-http.client :as http]\n            [clojure.string :as str]\n            [ave40.db :refer :all]\n            [ave40.utils :refer :all]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.tools.logging :as log]\n            [clojure.walk :as w]\n            [clojure.data])\n  (:import (java.io StringReader)))\n\n\n(def unvisited-urls (ref []))\n(def source-htmls (ref []))\n(def error_records (atom []))\n\n(defn- add-unvisited [url]\n  (if-not (some #{url} @unvisited-urls)\n    (alter unvisited-urls conj url)))\n\n(defn- pop-unvisited []\n  (when-let [url (peek @unvisited-urls)]\n    (alter unvisited-urls pop)\n    url))\n\n(defn- add-source-html [url html]\n  (alter source-htmls conj {:url url :html html :created_at (quot (System/currentTimeMillis) 1000)}))\n\n\n(defn- add-error-records [url error_code error_body]\n  (swap! error_records conj {:url url :error_code error_code :error_body error_body}))\n\n\n(defn- is-visited? [url]\n  (lazy-contains? (map #(:url %) @source-htmls) url))\n\n(defn- visited [url]\n  (let [resp (http/get url)\n        body (:body resp)]\n    (if\n      (= 200 (:status resp))\n      body\n      (add-error-records url (:status resp) body))))\n\n\n; 持久化\n(defn- add-save-watch []\n  (add-watch unvisited-urls :nvu-save-watch\n             (fn [_ _ old new]\n               (if (&lt; (count new) (count old))                ; 删除记录的情况\n                 (if-let [diff (first (clojure.data/diff old new))]\n                   (delete-table-data-by-url\n                     article-db\n                     {:table \&quot;unvisited_urls\&quot;\n                      :urls (remove nil? diff)})))\n               (if (&gt; (count new) (count old))                ; 添加记录的情况\n                 (if-let [diff (first (clojure.data/diff new old))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;unvisited_urls\&quot;\n                      :cols [\&quot;url\&quot;]\n                      :datas (map #(conj [] %) (remove nil? diff))})))))\n\n  (add-watch source-htmls :source-htmls-save-watch\n             (fn [_ _ old new]\n               (if (&gt; (count new) (count old))\n                 (if-let [diff (w/stringify-keys (remove nil? (first (clojure.data/diff new old))))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;source_article\&quot;\n                      :cols (keys (first diff))\n                      :datas (map #(vals %) diff)})))))\n\n  (add-watch error_records :error_records-save-watch\n             (fn [_ _ old new]\n               (if (&gt; (count new) (count old))\n                 (if-let [diff (w/stringify-keys (remove nil? (first (clojure.data/diff new old))))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;error_records\&quot;\n                      :cols (keys (first diff))\n                      :datas (map #(vals %) diff)}))))))\n\n\n(defn- ignore-url [url]\n  (let [up-url (str/upper-case url)]\n    (or (str/ends-with? up-url \&quot;.JPG\&quot;)\n        (str/ends-with? up-url \&quot;.PNG\&quot;)\n        (str/ends-with? up-url \&quot;.GIF\&quot;)\n        (str/ends-with? up-url \&quot;.PDF\&quot;)\n        (str/ends-with? up-url \&quot;.XML\&quot;)\n        (str/ends-with? up-url \&quot;.MP4\&quot;)\n        (str/ends-with? up-url \&quot;.RMVB\&quot;)\n        (not (str/starts-with? url \&quot;https://fr.vapingpost.com\&quot;)))))\n\n(defn- next-url-parser\n  \&quot;解析需要访问的urls\&quot;\n  [html]\n  (-&gt; html\n      (StringReader.)\n      (enlive/html-resource)\n      (enlive/select [:a])\n      ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes)))\n      ((fn [urls]\n         (remove #(or\n                    (nil? %)\n                    (ignore-url %))\n                 urls)))\n      ((fn [urls]\n         (map #(-&gt; %\n                   (str/split #\&quot;#\&quot;)\n                   (first)\n                   ((fn [url] (if (str/ends-with? url \&quot;/\&quot;) url (str url \&quot;/\&quot;)))))\n              urls)))))\n\n(defn- init-data\n  []\n  (let [url-list (select-all article-db {:table \&quot;unvisited_urls\&quot;})\n        html-list (select-all article-db {:table \&quot;source_article\&quot; :cols [\&quot;url\&quot;] :where \&quot;url like 'https://fr.vapingpost.com%'\&quot;})]\n    (dosync (ref-set unvisited-urls (into [] (map #(:url %) url-list))))\n    (dosync (ref-set source-htmls (into [] html-list)))\n    (add-save-watch)))\n\n\n(defn grap-task\n  []\n  (when-let [url (dosync (pop-unvisited))]\n    (try\n      (dosync\n        (when-not (is-visited? url)\n          (log/info (str \&quot;visiting: \&quot; url))\n          (let [html (visited url)]\n            (add-source-html url html)\n            (when-let [next-urls (next-url-parser html)]\n              (doseq [next-url next-urls]\n                (add-unvisited next-url))))))\n      (catch Exception e\n        (log/error e)\n        (add-error-records url nil (str e))))))\n\n(def continue (atom true))\n\n(defn do-grap\n  []\n  (init-data)\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task))))\n\n(defn stop-task []\n  (reset! continue false))\n\n(defn restart-task []\n  (reset! continue true)\n  (do-grap))\n\n(defn first-run-task [url]\n  (dosync (add-unvisited url))\n  (do-grap))\n\n\n;; 简易版本抓取\n(defn simple-grapper [selector next-page-url-generator]\n  (fn [start-page end-page]\n    (for [page (range start-page end-page)]\n      (let [source-url (next-page-url-generator page)\n            urls (-&gt; (http/get source-url)\n                     :body\n                     (StringReader.)\n                     (enlive/html-resource)\n                     (enlive/select selector)\n                     ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes))))]\n        (doseq [url urls]\n          (println url)\n          (let [html (-&gt; url\n                         (http/get)\n                         :body)]\n            (data-insert!\n              \&quot;source_article\&quot;\n              {\&quot;url\&quot; url \&quot;html\&quot; html \&quot;created_at\&quot; (quot (System/currentTimeMillis) 1000)})))))))\n\n(defn do-simple-grap []\n  (let [grapper (simple-grapper\n                  [:header.entry-header :h2.entry-title :a]\n                  #(str \&quot;http://www.vaporvanity.com/category/news/page/\&quot; %))]\n    (grapper 1 66)))\n\n(do-simple-grap)&quot;, :offset 6139, :ns &quot;grapdata.core&quot;} {:command &quot;(read)&quot;, :offset 6, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [ave40.db :refer :all]\n            [ave40.utils :refer :all]\n            [ave40.grap-article :as grap]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]]\n  (:import (java.io StringReader)))\n\n(defn parse-excel-data [list]\n  (cons (map name (keys (first list))) (map #(vals %) list)))\n\n#_(parse-excel-data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))\n\n#_(let [data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]})\n      wb (sheet/create-workbook \&quot;html\&quot; (parse-excel-data data))]\n  (sheet/save-workbook! \&quot;d:/exponents.xlsx\&quot; wb))\n\n(defn- split-trim [s]\n  (str/split s #\&quot;\\n|\\t+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n#_(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (apply concat (map (fn [html]\n                       (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource)\n                           (get-html-node-text)\n                           (#(mapcat split-trim %))))\n                     list)))\n\n(defn run-extra []\n  (let [selector [:div.td-module-thumb :a]\n        grapper1 (grap/simple-grapper\n                   selector\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        grapper2 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/science/page/\&quot; %))\n        grapper3 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/business/page/\&quot; %))\n        grapper4 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/society/page/\&quot; %))\n        grapper5 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))\n        grapper6 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/deals/page/\&quot; %))\n        grapper7 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/legal/page/\&quot; %))\n        grapper8 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/opinion/page/\&quot; %))\n        grapper9 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))\n        grapper10 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))]\n    (grapper1 1 37)\n    (grapper2 1 20)\n    (grapper3 1 15)\n    (grapper4 1 11)\n    (grapper5 1 15)\n    (grapper6 1 1)\n    (grapper7 1 5)\n    (grapper8 1 4)\n    (grapper9 1 13)\n    (grapper9 1 11)))\n\n&quot;, :offset 3090, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [ave40.db :refer :all]\n            [ave40.utils :refer :all]\n            [ave40.grap-article :as grap]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]]\n  (:import (java.io StringReader)))\n\n(defn parse-excel-data [list]\n  (cons (map name (keys (first list))) (map #(vals %) list)))\n\n#_(parse-excel-data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))\n\n#_(let [data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]})\n      wb (sheet/create-workbook \&quot;html\&quot; (parse-excel-data data))]\n  (sheet/save-workbook! \&quot;d:/exponents.xlsx\&quot; wb))\n\n(defn- split-trim [s]\n  (str/split s #\&quot;\\n|\\t+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n#_(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (apply concat (map (fn [html]\n                       (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource)\n                           (get-html-node-text)\n                           (#(mapcat split-trim %))))\n                     list)))\n\n(defn run-extra []\n  (let [selector [:div.td-module-thumb :a]\n        grapper1 (grap/simple-grapper\n                   selector\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        grapper2 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/science/page/\&quot; %))\n        grapper3 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/business/page/\&quot; %))\n        grapper4 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/society/page/\&quot; %))\n        grapper5 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))\n        grapper6 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/deals/page/\&quot; %))\n        grapper7 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/legal/page/\&quot; %))\n        grapper8 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/opinion/page/\&quot; %))\n        grapper9 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))\n        grapper10 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))]\n    (grapper1 1 37)\n    (grapper2 1 20)\n    (grapper3 1 15)\n    (grapper4 1 11)\n    (grapper5 1 15)\n    (grapper6 1 1)\n    (grapper7 1 5)\n    (grapper8 1 4)\n    (grapper9 1 13)\n    (grapper9 1 11)))\n\n(run-extra)&quot;, :offset 3101, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [ave40.db :refer :all]\n            [ave40.utils :refer :all]\n            [ave40.grap-article :as grap]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]]\n  (:import (java.io StringReader)))\n\n(defn parse-excel-data [list]\n  (cons (map name (keys (first list))) (map #(vals %) list)))\n\n#_(parse-excel-data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))\n\n#_(let [data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]})\n      wb (sheet/create-workbook \&quot;html\&quot; (parse-excel-data data))]\n  (sheet/save-workbook! \&quot;d:/exponents.xlsx\&quot; wb))\n\n(defn- split-trim [s]\n  (str/split s #\&quot;\\n|\\t+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n#_(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (apply concat (map (fn [html]\n                       (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource)\n                           (get-html-node-text)\n                           (#(mapcat split-trim %))))\n                     list)))\n\n(defn run-extra1 []\n  (let [selector [:div.td-module-thumb :a]\n        grapper1 (grap/simple-grapper\n                   selector\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        grapper2 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/science/page/\&quot; %))\n        grapper3 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/business/page/\&quot; %))\n        grapper4 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/society/page/\&quot; %))\n        grapper5 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))\n        grapper6 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/deals/page/\&quot; %))\n        grapper7 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/legal/page/\&quot; %))\n        grapper8 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/opinion/page/\&quot; %))\n        grapper9 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))\n        grapper10 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))]\n    (grapper1 1 37)\n    (grapper2 1 20)\n    (grapper3 1 15)\n    (grapper4 1 11)\n    (grapper5 1 15)\n    (grapper6 1 1)\n    (grapper7 1 5)\n    (grapper8 1 4)\n    (grapper9 1 13)\n    (grapper10 1 11)))\n\n(defn run-extra []\n  (let [grapper (grap/simple-grapper\n                  [:header.entry-header :h2.entry-title :a]\n                  #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))]\n    (grapper 1 37)))\n\n(run-extra)&quot;, :offset 3324, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.grap-article\n                  (:require [clj-http.client :as http]\n                            [clojure.string :as str]\n                            [ave40.db :refer :all]\n                            [ave40.utils :refer :all]\n                            [net.cgrand.enlive-html :as enlive]\n                            [clojure.tools.logging :as log]\n                            [clojure.walk :as w]\n                            [clojure.data])\n                  (:import (java.io StringReader)))\n\n\n(def unvisited-urls (ref []))\n(def source-htmls (ref []))\n(def error_records (atom []))\n\n(defn- add-unvisited [url]\n  (if-not (some #{url} @unvisited-urls)\n    (alter unvisited-urls conj url)))\n\n(defn- pop-unvisited []\n  (when-let [url (peek @unvisited-urls)]\n    (alter unvisited-urls pop)\n    url))\n\n(defn- add-source-html [url html]\n  (alter source-htmls conj {:url url :html html :created_at (quot (System/currentTimeMillis) 1000)}))\n\n\n(defn- add-error-records [url error_code error_body]\n  (swap! error_records conj {:url url :error_code error_code :error_body error_body}))\n\n\n(defn- is-visited? [url]\n  (lazy-contains? (map #(:url %) @source-htmls) url))\n\n(defn- visited [url]\n  (let [resp (http/get url)\n        body (:body resp)]\n    (if\n      (= 200 (:status resp))\n      body\n      (add-error-records url (:status resp) body))))\n\n\n; 持久化\n(defn- add-save-watch []\n  (add-watch unvisited-urls :nvu-save-watch\n             (fn [_ _ old new]\n               (if (&lt; (count new) (count old))                ; 删除记录的情况\n                 (if-let [diff (first (clojure.data/diff old new))]\n                   (delete-table-data-by-url\n                     article-db\n                     {:table \&quot;unvisited_urls\&quot;\n                      :urls (remove nil? diff)})))\n               (if (&gt; (count new) (count old))                ; 添加记录的情况\n                 (if-let [diff (first (clojure.data/diff new old))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;unvisited_urls\&quot;\n                      :cols [\&quot;url\&quot;]\n                      :datas (map #(conj [] %) (remove nil? diff))})))))\n\n  (add-watch source-htmls :source-htmls-save-watch\n             (fn [_ _ old new]\n               (if (&gt; (count new) (count old))\n                 (if-let [diff (w/stringify-keys (remove nil? (first (clojure.data/diff new old))))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;source_article\&quot;\n                      :cols (keys (first diff))\n                      :datas (map #(vals %) diff)})))))\n\n  (add-watch error_records :error_records-save-watch\n             (fn [_ _ old new]\n               (if (&gt; (count new) (count old))\n                 (if-let [diff (w/stringify-keys (remove nil? (first (clojure.data/diff new old))))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;error_records\&quot;\n                      :cols (keys (first diff))\n                      :datas (map #(vals %) diff)}))))))\n\n\n(defn- ignore-url [url]\n  (let [up-url (str/upper-case url)]\n    (or (str/ends-with? up-url \&quot;.JPG\&quot;)\n        (str/ends-with? up-url \&quot;.PNG\&quot;)\n        (str/ends-with? up-url \&quot;.GIF\&quot;)\n        (str/ends-with? up-url \&quot;.PDF\&quot;)\n        (str/ends-with? up-url \&quot;.XML\&quot;)\n        (str/ends-with? up-url \&quot;.MP4\&quot;)\n        (str/ends-with? up-url \&quot;.RMVB\&quot;)\n        (not (str/starts-with? url \&quot;https://fr.vapingpost.com\&quot;)))))\n\n(defn- next-url-parser\n  \&quot;解析需要访问的urls\&quot;\n  [html]\n  (-&gt; html\n      (StringReader.)\n      (enlive/html-resource)\n      (enlive/select [:a])\n      ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes)))\n      ((fn [urls]\n         (remove #(or\n                    (nil? %)\n                    (ignore-url %))\n                 urls)))\n      ((fn [urls]\n         (map #(-&gt; %\n                   (str/split #\&quot;#\&quot;)\n                   (first)\n                   ((fn [url] (if (str/ends-with? url \&quot;/\&quot;) url (str url \&quot;/\&quot;)))))\n              urls)))))\n\n(defn- init-data\n  []\n  (let [url-list (select-all article-db {:table \&quot;unvisited_urls\&quot;})\n        html-list (select-all article-db {:table \&quot;source_article\&quot; :cols [\&quot;url\&quot;] :where \&quot;url like 'https://fr.vapingpost.com%'\&quot;})]\n    (dosync (ref-set unvisited-urls (into [] (map #(:url %) url-list))))\n    (dosync (ref-set source-htmls (into [] html-list)))\n    (add-save-watch)))\n\n\n(defn grap-task\n  []\n  (when-let [url (dosync (pop-unvisited))]\n    (try\n      (dosync\n        (when-not (is-visited? url)\n          (log/info (str \&quot;visiting: \&quot; url))\n          (let [html (visited url)]\n            (add-source-html url html)\n            (when-let [next-urls (next-url-parser html)]\n              (doseq [next-url next-urls]\n                (add-unvisited next-url))))))\n      (catch Exception e\n        (log/error e)\n        (add-error-records url nil (str e))))))\n\n(def continue (atom true))\n\n(defn do-grap\n  []\n  (init-data)\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task))))\n\n(defn stop-task []\n  (reset! continue false))\n\n(defn restart-task []\n  (reset! continue true)\n  (do-grap))\n\n(defn first-run-task [url]\n  (dosync (add-unvisited url))\n  (do-grap))\n\n\n;; 简易版本抓取\n(defn simple-grapper [selector next-page-url-generator]\n  (fn [start-page end-page]\n    (for [page (range start-page end-page)]\n      (let [source-url (next-page-url-generator page)\n            urls (-&gt; (http/get source-url)\n                     :body\n                     (StringReader.)\n                     (enlive/html-resource)\n                     (enlive/select selector)\n                     ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes))))]\n        (doseq [url urls]\n          (println url)\n          (select-all article-db {:table \&quot;source_article\&quot; :where (str \&quot;url=\&quot; \&quot;111\&quot;)})\n          (let [html (-&gt; url\n                         (http/get)\n                         :body)]\n            (data-insert!\n              \&quot;source_article\&quot;\n              {\&quot;url\&quot; url \&quot;html\&quot; html \&quot;created_at\&quot; (quot (System/currentTimeMillis) 1000)})))))))\n\n(defn do-simple-grap []\n  (let [grapper (simple-grapper\n                  [:header.entry-header :h2.entry-title :a]\n                  #(str \&quot;http://www.vaporvanity.com/category/news/page/\&quot; %))]\n    (grapper 1 66)))\n&quot;, :offset 6352, :ns &quot;grapdata.core&quot;} {:command &quot;(select-all article-db {:table \&quot;source_article\&quot; :where (str \&quot;url=\&quot; \&quot;111\&quot;)})&quot;, :offset 75, :ns &quot;ave40.grap-article&quot;} {:command &quot;(select-all article-db {:table \&quot;source_article\&quot; :where (str \&quot;url=\&quot; \&quot;http://vaping360.com/hong-kong-plans-ban-vaping/\&quot;)})&quot;, :offset 120, :ns &quot;ave40.grap-article&quot;} {:command &quot;(select-all article-db {:table \&quot;source_article\&quot; :where (str \&quot;url=\&quot; \&quot;'http://vaping360.com/hong-kong-plans-ban-vaping/'\&quot;)})&quot;, :offset 122, :ns &quot;ave40.grap-article&quot;} {:command &quot;(empty? [])&quot;, :offset 11, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.grap-article\n                  (:require [clj-http.client :as http]\n                            [clojure.string :as str]\n                            [ave40.db :refer :all]\n                            [ave40.utils :refer :all]\n                            [net.cgrand.enlive-html :as enlive]\n                            [clojure.tools.logging :as log]\n                            [clojure.walk :as w]\n                            [clojure.data])\n                  (:import (java.io StringReader)))\n\n\n(def unvisited-urls (ref []))\n(def source-htmls (ref []))\n(def error_records (atom []))\n\n(defn- add-unvisited [url]\n  (if-not (some #{url} @unvisited-urls)\n    (alter unvisited-urls conj url)))\n\n(defn- pop-unvisited []\n  (when-let [url (peek @unvisited-urls)]\n    (alter unvisited-urls pop)\n    url))\n\n(defn- add-source-html [url html]\n  (alter source-htmls conj {:url url :html html :created_at (quot (System/currentTimeMillis) 1000)}))\n\n\n(defn- add-error-records [url error_code error_body]\n  (swap! error_records conj {:url url :error_code error_code :error_body error_body}))\n\n\n(defn- is-visited? [url]\n  (lazy-contains? (map #(:url %) @source-htmls) url))\n\n(defn- visited [url]\n  (let [resp (http/get url)\n        body (:body resp)]\n    (if\n      (= 200 (:status resp))\n      body\n      (add-error-records url (:status resp) body))))\n\n\n; 持久化\n(defn- add-save-watch []\n  (add-watch unvisited-urls :nvu-save-watch\n             (fn [_ _ old new]\n               (if (&lt; (count new) (count old))                ; 删除记录的情况\n                 (if-let [diff (first (clojure.data/diff old new))]\n                   (delete-table-data-by-url\n                     article-db\n                     {:table \&quot;unvisited_urls\&quot;\n                      :urls (remove nil? diff)})))\n               (if (&gt; (count new) (count old))                ; 添加记录的情况\n                 (if-let [diff (first (clojure.data/diff new old))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;unvisited_urls\&quot;\n                      :cols [\&quot;url\&quot;]\n                      :datas (map #(conj [] %) (remove nil? diff))})))))\n\n  (add-watch source-htmls :source-htmls-save-watch\n             (fn [_ _ old new]\n               (if (&gt; (count new) (count old))\n                 (if-let [diff (w/stringify-keys (remove nil? (first (clojure.data/diff new old))))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;source_article\&quot;\n                      :cols (keys (first diff))\n                      :datas (map #(vals %) diff)})))))\n\n  (add-watch error_records :error_records-save-watch\n             (fn [_ _ old new]\n               (if (&gt; (count new) (count old))\n                 (if-let [diff (w/stringify-keys (remove nil? (first (clojure.data/diff new old))))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;error_records\&quot;\n                      :cols (keys (first diff))\n                      :datas (map #(vals %) diff)}))))))\n\n\n(defn- ignore-url [url]\n  (let [up-url (str/upper-case url)]\n    (or (str/ends-with? up-url \&quot;.JPG\&quot;)\n        (str/ends-with? up-url \&quot;.PNG\&quot;)\n        (str/ends-with? up-url \&quot;.GIF\&quot;)\n        (str/ends-with? up-url \&quot;.PDF\&quot;)\n        (str/ends-with? up-url \&quot;.XML\&quot;)\n        (str/ends-with? up-url \&quot;.MP4\&quot;)\n        (str/ends-with? up-url \&quot;.RMVB\&quot;)\n        (not (str/starts-with? url \&quot;https://fr.vapingpost.com\&quot;)))))\n\n(defn- next-url-parser\n  \&quot;解析需要访问的urls\&quot;\n  [html]\n  (-&gt; html\n      (StringReader.)\n      (enlive/html-resource)\n      (enlive/select [:a])\n      ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes)))\n      ((fn [urls]\n         (remove #(or\n                    (nil? %)\n                    (ignore-url %))\n                 urls)))\n      ((fn [urls]\n         (map #(-&gt; %\n                   (str/split #\&quot;#\&quot;)\n                   (first)\n                   ((fn [url] (if (str/ends-with? url \&quot;/\&quot;) url (str url \&quot;/\&quot;)))))\n              urls)))))\n\n(defn- init-data\n  []\n  (let [url-list (select-all article-db {:table \&quot;unvisited_urls\&quot;})\n        html-list (select-all article-db {:table \&quot;source_article\&quot; :cols [\&quot;url\&quot;] :where \&quot;url like 'https://fr.vapingpost.com%'\&quot;})]\n    (dosync (ref-set unvisited-urls (into [] (map #(:url %) url-list))))\n    (dosync (ref-set source-htmls (into [] html-list)))\n    (add-save-watch)))\n\n\n(defn grap-task\n  []\n  (when-let [url (dosync (pop-unvisited))]\n    (try\n      (dosync\n        (when-not (is-visited? url)\n          (log/info (str \&quot;visiting: \&quot; url))\n          (let [html (visited url)]\n            (add-source-html url html)\n            (when-let [next-urls (next-url-parser html)]\n              (doseq [next-url next-urls]\n                (add-unvisited next-url))))))\n      (catch Exception e\n        (log/error e)\n        (add-error-records url nil (str e))))))\n\n(def continue (atom true))\n\n(defn do-grap\n  []\n  (init-data)\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task))))\n\n(defn stop-task []\n  (reset! continue false))\n\n(defn restart-task []\n  (reset! continue true)\n  (do-grap))\n\n(defn first-run-task [url]\n  (dosync (add-unvisited url))\n  (do-grap))\n\n\n;; 简易版本抓取\n(defn simple-grapper [selector next-page-url-generator]\n  (fn [start-page end-page]\n    (for [page (range start-page end-page)]\n      (let [source-url (next-page-url-generator page)\n            urls (-&gt; (http/get source-url)\n                     :body\n                     (StringReader.)\n                     (enlive/html-resource)\n                     (enlive/select selector)\n                     ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes))))]\n        (doseq [url urls]\n          (println url)\n          (if (empty? (select-all article-db {:table \&quot;source_article\&quot; :where (str \&quot;url='\&quot; url \&quot;'\&quot;)}))\n            (let [html (-&gt; url\n                           (http/get)\n                           :body)]\n              (data-insert!\n                \&quot;source_article\&quot;\n                {\&quot;url\&quot; url \&quot;html\&quot; html \&quot;created_at\&quot; (quot (System/currentTimeMillis) 1000)}))))))))\n\n(defn do-simple-grap []\n  (let [grapper (simple-grapper\n                  [:header.entry-header :h2.entry-title :a]\n                  #(str \&quot;http://www.vaporvanity.com/category/news/page/\&quot; %))]\n    (grapper 1 66)))\n&quot;, :offset 6381, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [ave40.db :refer :all]\n            [ave40.utils :refer :all]\n            [ave40.grap-article :as grap]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]]\n  (:import (java.io StringReader)))\n\n(defn parse-excel-data [list]\n  (cons (map name (keys (first list))) (map #(vals %) list)))\n\n#_(parse-excel-data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))\n\n#_(let [data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]})\n      wb (sheet/create-workbook \&quot;html\&quot; (parse-excel-data data))]\n  (sheet/save-workbook! \&quot;d:/exponents.xlsx\&quot; wb))\n\n(defn- split-trim [s]\n  (str/split s #\&quot;\\n|\\t+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n#_(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (apply concat (map (fn [html]\n                       (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource)\n                           (get-html-node-text)\n                           (#(mapcat split-trim %))))\n                     list)))\n\n(defn run-extra1 []\n  (let [selector [:div.td-module-thumb :a]\n        grapper1 (grap/simple-grapper\n                   selector\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        grapper2 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/science/page/\&quot; %))\n        grapper3 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/business/page/\&quot; %))\n        grapper4 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/society/page/\&quot; %))\n        grapper5 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))\n        grapper6 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/deals/page/\&quot; %))\n        grapper7 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/legal/page/\&quot; %))\n        grapper8 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/opinion/page/\&quot; %))\n        grapper9 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))\n        grapper10 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))]\n    (grapper1 1 37)\n    (grapper2 1 20)\n    (grapper3 1 15)\n    (grapper4 1 11)\n    (grapper5 1 15)\n    (grapper6 1 1)\n    (grapper7 1 5)\n    (grapper8 1 4)\n    (grapper9 1 13)\n    (grapper10 1 11)))\n\n(defn run-extra []\n  (let [grapper (grap/simple-grapper\n                  [:div.td-module-thumb :a]\n                  #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))]\n    (grapper 1 37)))\n\n(run-extra)&quot;, :offset 3308, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [ave40.db :refer :all]\n            [ave40.utils :refer :all]\n            [ave40.grap-article :as grap]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]]\n  (:import (java.io StringReader)))\n\n(defn parse-excel-data [list]\n  (cons (map name (keys (first list))) (map #(vals %) list)))\n\n#_(parse-excel-data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))\n\n#_(let [data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]})\n      wb (sheet/create-workbook \&quot;html\&quot; (parse-excel-data data))]\n  (sheet/save-workbook! \&quot;d:/exponents.xlsx\&quot; wb))\n\n(defn- split-trim [s]\n  (str/split s #\&quot;\\n|\\t+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n#_(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (apply concat (map (fn [html]\n                       (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource)\n                           (get-html-node-text)\n                           (#(mapcat split-trim %))))\n                     list)))\n\n(defn run-extra1 []\n  (let [selector [:div.td-module-thumb :a]\n        grapper1 (grap/simple-grapper\n                   selector\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        grapper2 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/science/page/\&quot; %))\n        grapper3 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/business/page/\&quot; %))\n        grapper4 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/society/page/\&quot; %))\n        grapper5 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))\n        grapper6 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/deals/page/\&quot; %))\n        grapper7 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/legal/page/\&quot; %))\n        grapper8 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/opinion/page/\&quot; %))\n        grapper9 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))\n        grapper10 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))]\n    (future (grapper1 1 37))\n    (future (grapper2 1 20))\n    (future (grapper3 1 15))\n    (future (grapper4 1 11))\n    (future (grapper5 1 15))\n    (future (grapper6 1 1))\n    (future (grapper7 1 5))\n    (future (grapper8 1 4))\n    (future (grapper9 1 13))\n    (future (grapper10 1 11))))\n\n(defn run-extra []\n  (let [grapper (grap/simple-grapper\n                  [:div.td-module-thumb :a]\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))]\n    (grapper 1 37)))\n\n(run-extra1)&quot;, :offset 3398, :ns &quot;grapdata.core&quot;} {:command &quot;(read-line)&quot;, :offset 11, :ns &quot;grapdata.core&quot;} {:command &quot;(ns grapdata.core\n  (:require [ave40.spinner :as sp]\n            [ave40.push :as push]\n            [ave40.grap-article :as grap]\n            [ave40.extra :as extra])\n  (:gen-class))\n\n(defn -main\n  \&quot;I don't do a whole lot ... yet.\&quot;\n  [&amp; args]\n  (println \&quot;please enter function:\&quot;)\n  (let [inp (read-line)]\n    (case inp\n      \&quot;spinner\&quot; (sp/simple-run-spinner)\n      \&quot;push\&quot; (push/do-push)\n      \&quot;simple-grap\&quot; (grap/do-simple-grap)\n      \&quot;extra\&quot; (extra/run-extra)\n      \&quot;11\&quot; (println 1))))\n\n#_(-main)&quot;, :offset 496, :ns &quot;grapdata.core&quot;} {:command &quot;(-main)&quot;, :offset 7, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [ave40.db :refer :all]\n            [ave40.utils :refer :all]\n            [ave40.grap-article :as grap]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]]\n  (:import (java.io StringReader)))\n\n(defn parse-excel-data [list]\n  (cons (map name (keys (first list))) (map #(vals %) list)))\n\n#_(parse-excel-data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))\n\n#_(let [data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]})\n      wb (sheet/create-workbook \&quot;html\&quot; (parse-excel-data data))]\n  (sheet/save-workbook! \&quot;d:/exponents.xlsx\&quot; wb))\n\n(defn- split-trim [s]\n  (str/split s #\&quot;\\n|\\t+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n#_(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (apply concat (map (fn [html]\n                       (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource)\n                           (get-html-node-text)\n                           (#(mapcat split-trim %))))\n                     list)))\n\n(defn run-extra []\n  (let [selector [:div.td-module-thumb :a]\n        grapper1 (grap/simple-grapper\n                   selector\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        grapper2 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/science/page/\&quot; %))\n        grapper3 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/business/page/\&quot; %))\n        grapper4 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/society/page/\&quot; %))\n        grapper5 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))\n        grapper6 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/deals/page/\&quot; %))\n        grapper7 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/legal/page/\&quot; %))\n        grapper8 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/opinion/page/\&quot; %))\n        grapper9 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))\n        grapper10 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))]\n    (future (grapper1 1 37))\n    (future (grapper2 1 20))\n    (future (grapper3 1 15))\n    (future (grapper4 1 11))\n    (future (grapper5 1 15))\n    (future (grapper6 1 1))\n    (future (grapper7 1 5))\n    (future (grapper8 1 4))\n    (future (grapper9 1 13))\n    (future (grapper10 1 11))))\n\n(defn run-extra2 []\n  (let [grapper (grap/simple-grapper\n                  [:div.td-module-thumb :a]\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))]\n    (grapper 1 37)))\n&quot;, :offset 3385, :ns &quot;grapdata.core&quot;} {:command &quot;(defn run-extra []\n  (let [selector [:div.td-module-thumb :a]\n        grapper1 (grap/simple-grapper\n                   selector\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        grapper2 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/science/page/\&quot; %))\n        grapper3 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/business/page/\&quot; %))\n        grapper4 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/society/page/\&quot; %))\n        grapper5 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))\n        grapper6 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/deals/page/\&quot; %))\n        grapper7 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/legal/page/\&quot; %))\n        grapper8 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/opinion/page/\&quot; %))\n        grapper9 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))\n        grapper10 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))]\n    (grapper1 1 37)\n    (grapper2 1 20)\n    (grapper3 1 15)\n    (grapper4 1 11)\n    (grapper5 1 15)\n    (grapper6 1 1)\n    (grapper7 1 5)\n    (grapper8 1 4)\n    (grapper9 1 13)\n    (grapper10 1 11)))&quot;, :offset 1729, :ns &quot;ave40.extra&quot;} {:command &quot;(ns ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [ave40.db :refer :all]\n            [ave40.utils :refer :all]\n            [ave40.grap-article :as grap]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]\n            [clj-http.client :as http]]\n  (:import (java.io StringReader)))&quot;, :offset 344, :ns &quot;ave40.extra&quot;} {:command &quot;(http/get \&quot;https://www.vapingpost.com/2017/10/13/latest-study-even-those-most-susceptible-to-smoking-are-trying-to-quit/\&quot;)&quot;, :offset 122, :ns &quot;ave40.extra&quot;} {:command &quot;(ns ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [ave40.db :refer :all]\n            [ave40.utils :refer :all]\n            [ave40.grap-article :as grap]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]\n            [clj-http.client :as http]]\n  (:import (java.io StringReader)))\n\n(defn parse-excel-data [list]\n  (cons (map name (keys (first list))) (map #(vals %) list)))\n\n#_(parse-excel-data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))\n\n#_(let [data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]})\n      wb (sheet/create-workbook \&quot;html\&quot; (parse-excel-data data))]\n  (sheet/save-workbook! \&quot;d:/exponents.xlsx\&quot; wb))\n\n(defn- split-trim [s]\n  (str/split s #\&quot;\\n|\\t+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n#_(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (apply concat (map (fn [html]\n                       (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource)\n                           (get-html-node-text)\n                           (#(mapcat split-trim %))))\n                     list)))\n\n(defn run-extra []\n  (let [selector [:div.td-module-thumb :a]\n        grapper1 (grap/simple-grapper\n                   selector\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        grapper2 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/science/page/\&quot; %))\n        grapper3 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/business/page/\&quot; %))\n        grapper4 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/society/page/\&quot; %))\n        grapper5 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))\n        grapper6 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/deals/page/\&quot; %))\n        grapper7 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/legal/page/\&quot; %))\n        grapper8 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/opinion/page/\&quot; %))\n        grapper9 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))\n        grapper10 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))]\n    (future\n      (grapper1 1 37)\n      (grapper2 1 20)\n      (grapper3 1 15))\n    (future\n      (grapper4 1 11)\n      (grapper5 1 15)\n      (grapper6 1 1)\n      (grapper7 1 5)\n      (grapper8 1 4)\n      (grapper9 1 13)\n      (grapper10 1 11))))\n\n(defn run-extra2 []\n  (let [grapper (grap/simple-grapper\n                  [:div.td-module-thumb :a]\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))]\n    (grapper 1 37)))\n\n&quot;, :offset 3381, :ns &quot;grapdata.core&quot;} {:command &quot;(defn run-extra2 []\n  (let [grapper (grap/simple-grapper\n                  [:div.td-module-thumb :a]\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))]\n    (grapper 1 37)))&quot;, :offset 203, :ns &quot;ave40.extra&quot;} {:command &quot;(ns ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [ave40.db :refer :all]\n            [ave40.utils :refer :all]\n            [ave40.grap-article :as grap]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]\n            [clj-http.client :as http]]\n  (:import (java.io StringReader)))\n\n(defn parse-excel-data [list]\n  (cons (map name (keys (first list))) (map #(vals %) list)))\n\n#_(parse-excel-data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))\n\n#_(let [data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]})\n      wb (sheet/create-workbook \&quot;html\&quot; (parse-excel-data data))]\n  (sheet/save-workbook! \&quot;d:/exponents.xlsx\&quot; wb))\n\n(defn- split-trim [s]\n  (str/split s #\&quot;\\n|\\t+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n#_(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (apply concat (map (fn [html]\n                       (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource)\n                           (get-html-node-text)\n                           (#(mapcat split-trim %))))\n                     list)))\n\n(defn run-extra []\n  (let [selector [:div.td-module-thumb :a]\n        grapper1 (grap/simple-grapper\n                   selector\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        grapper2 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/science/page/\&quot; %))\n        grapper3 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/business/page/\&quot; %))\n        grapper4 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/society/page/\&quot; %))\n        grapper5 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))\n        grapper6 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/deals/page/\&quot; %))\n        grapper7 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/legal/page/\&quot; %))\n        grapper8 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/opinion/page/\&quot; %))\n        grapper9 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))\n        grapper10 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))]\n    (grapper1 1 37)\n    (grapper2 1 20)\n    (grapper3 1 15)\n    (grapper4 1 11)\n    (grapper5 1 15)\n    (grapper6 1 1)\n    (grapper7 1 5)\n    (grapper8 1 4)\n    (grapper9 1 13)\n    (grapper10 1 11)))\n\n(defn run-extra2 []\n  (let [grapper (grap/simple-grapper\n                  [:div.td-module-thumb :a]\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))]\n    (grapper 1 37)))\n\n(run-extra)&quot;, :offset 3346, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [ave40.db :refer :all]\n            [ave40.utils :refer :all]\n            [ave40.grap-article :as grap]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]\n            [clj-http.client :as http]]\n  (:import (java.io StringReader)))\n\n(defn parse-excel-data [list]\n  (cons (map name (keys (first list))) (map #(vals %) list)))\n\n#_(parse-excel-data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))\n\n#_(let [data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]})\n      wb (sheet/create-workbook \&quot;html\&quot; (parse-excel-data data))]\n  (sheet/save-workbook! \&quot;d:/exponents.xlsx\&quot; wb))\n\n(defn- split-trim [s]\n  (str/split s #\&quot;\\n|\\t+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n#_(let [list (map :content\n                (select-all article-db\n                            {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))]\n  (apply concat (map (fn [html]\n                       (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource)\n                           (get-html-node-text)\n                           (#(mapcat split-trim %))))\n                     list)))\n\n(defn run-extra []\n  (let [selector [:div.td-module-thumb :a]\n        grapper1 (grap/simple-grapper\n                   selector\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        grapper2 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/science/page/\&quot; %))\n        grapper3 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/business/page/\&quot; %))\n        grapper4 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/society/page/\&quot; %))\n        grapper5 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))\n        grapper6 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/deals/page/\&quot; %))\n        grapper7 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/legal/page/\&quot; %))\n        grapper8 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/opinion/page/\&quot; %))\n        grapper9 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))\n        grapper10 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))]\n    (grapper1 1 37)\n    #_(grapper2 1 20)\n    #_(grapper3 1 15)\n    #_(grapper4 1 11)\n    #_(grapper5 1 15)\n    #_(grapper6 1 1)\n    #_(grapper7 1 5)\n    #_(grapper8 1 4)\n    #_(grapper9 1 13)\n    #_(grapper10 1 11)))\n\n(defn run-extra2 []\n  (let [grapper (grap/simple-grapper\n                  [:div.td-module-thumb :a]\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))]\n    (grapper 1 37)))\n\n(run-extra)&quot;, :offset 3364, :ns &quot;grapdata.core&quot;} {:command &quot;(load \&quot;ave40.extra\&quot;)&quot;, :offset 20, :ns &quot;grapdata.core&quot;} {:command &quot;1&quot;, :offset 1, :ns &quot;grapdata.core&quot;} {:command &quot;(load \&quot;ave40/extra\&quot;)&quot;, :offset 20, :ns &quot;grapdata.core&quot;} {:command &quot;(ns grapdata.ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [grapdata.ave40.db :refer :all]\n            [grapdata.ave40.utils :refer :all]\n            [grapdata.ave40.grap-article :as grap]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]\n            [clj-http.client :as http]]\n  (:import (java.io StringReader)))\n\n(defn parse-excel-data [list]\n  (cons (map name (keys (first list))) (map #(vals %) list)))\n\n#_(parse-excel-data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))\n\n#_(let [data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]})\n      wb (sheet/create-workbook \&quot;html\&quot; (parse-excel-data data))]\n  (sheet/save-workbook! \&quot;d:/exponents.xlsx\&quot; wb))\n\n(defn- split-trim [s]\n  (str/split s #\&quot;\\n|\\t+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n(defn run-extra []\n  (let [selector [:div.td-module-thumb :a]\n        grapper1 (grap/simple-grapper\n                   selector\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        grapper2 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/science/page/\&quot; %))\n        grapper3 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/business/page/\&quot; %))\n        grapper4 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/society/page/\&quot; %))\n        grapper5 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))\n        grapper6 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/deals/page/\&quot; %))\n        grapper7 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/legal/page/\&quot; %))\n        grapper8 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/opinion/page/\&quot; %))\n        grapper9 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))\n        grapper10 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))]\n    #_(grapper1 1 37)\n    (grapper2 1 20)\n    #_(grapper3 1 15)\n    #_(grapper4 1 11)\n    #_(grapper9 1 13)\n    #_(grapper10 1 11)\n    #_(grapper5 1 15)\n    #_(grapper6 1 1)\n    #_(grapper7 1 5)\n    #_(grapper8 1 4)))\n\n(defn run-extra2 []\n  (let [grapper (grap/simple-grapper\n                  [:div.td-module-thumb :a]\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))]\n    (grapper 1 37)))\n\n(defn aa []\n  (let [f (fn [n] (println n))]\n    (f 1)\n    (f 2)\n    (f 3)))\n\n(aa)&quot;, :offset 3026, :ns &quot;grapdata.core&quot;} {:command &quot;\n(defn aa []\n  (let [f (dddd\n            [:div.td-module-thumb :a]\n            #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))]\n    (f 1 10)\n    (f 1 10)\n    (f 1 10)))\n\n(aa)&quot;, :offset 189, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;\n(defn dddd [selector next-page-url-generator]\n  (fn [start-page end-page]\n    (for [page (range start-page end-page)]\n      (let [source-url (next-page-url-generator page)\n            urls (-&gt; (http/get source-url)\n                     :body\n                     (StringReader.)\n                     (enlive/html-resource)\n                     (enlive/select selector)\n                     ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes))))]\n        (doseq [url urls]\n          (println url))))))\n\n(defn aa []\n  (let [f (dddd\n            [:div.td-module-thumb :a]\n            #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))]\n    (f 1 10)\n    (f 1 10)\n    (f 1 10)))\n\n(aa)&quot;, :offset 689, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;(ns grapdata.ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [grapdata.ave40.db :refer :all]\n            [grapdata.ave40.utils :refer :all]\n            [grapdata.ave40.grap-article :as grap]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]\n            [clj-http.client :as http]]\n  (:import (java.io StringReader)))\n\n(defn parse-excel-data [list]\n  (cons (map name (keys (first list))) (map #(vals %) list)))\n\n#_(parse-excel-data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))\n\n#_(let [data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]})\n      wb (sheet/create-workbook \&quot;html\&quot; (parse-excel-data data))]\n  (sheet/save-workbook! \&quot;d:/exponents.xlsx\&quot; wb))\n\n(defn- split-trim [s]\n  (str/split s #\&quot;\\n|\\t+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n(defn run-extra []\n  (let [selector [:div.td-module-thumb :a]\n        grapper1 (grap/simple-grapper\n                   selector\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        grapper2 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/science/page/\&quot; %))\n        grapper3 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/business/page/\&quot; %))\n        grapper4 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/society/page/\&quot; %))\n        grapper5 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))\n        grapper6 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/deals/page/\&quot; %))\n        grapper7 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/legal/page/\&quot; %))\n        grapper8 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/opinion/page/\&quot; %))\n        grapper9 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))\n        grapper10 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))]\n    #_(grapper1 1 37)\n    (grapper2 1 20)\n    #_(grapper3 1 15)\n    #_(grapper4 1 11)\n    #_(grapper9 1 13)\n    #_(grapper10 1 11)\n    #_(grapper5 1 15)\n    #_(grapper6 1 1)\n    #_(grapper7 1 5)\n    #_(grapper8 1 4)))\n\n(defn run-extra2 []\n  (let [grapper (grap/simple-grapper\n                  [:div.td-module-thumb :a]\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))]\n    (grapper 1 37)))\n\n\n(defn dddd [selector next-page-url-generator]\n  (fn [start-page end-page]\n    (for [page (range start-page end-page)]\n      (let [source-url (next-page-url-generator page)\n            urls (-&gt; (http/get source-url)\n                     :body\n                     (StringReader.)\n                     (enlive/html-resource)\n                     (enlive/select selector)\n                     ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes))))]\n        (doseq [url urls]\n          (println url))))))\n\n(defn aa []\n  (let [f1 (dddd\n            [:div.td-module-thumb :a]\n            #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        f2 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))\n        f3 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))]\n    (f1 1 2)\n    (f2 1 2)\n    (f3 1 2)))\n\n(aa)&quot;, :offset 3894, :ns &quot;grapdata.core&quot;} {:command &quot;(aa)&quot;, :offset 4, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;\n(defn ws []\n  (fn [n] (println n)))\n\n(defn aa []\n  (let [f1 (ws)\n        f2 (ws)\n        f3 (ws)]\n    (f1 1)\n    (f2 2)\n    (f3 3)))\n\n(aa)&quot;, :offset 139, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;(defn dddd [selector next-page-url-generator]\n  (fn [start-page end-page]\n    (for [page (range start-page end-page)]\n      (let [source-url (next-page-url-generator page)\n            urls (-&gt; (http/get source-url)\n                     :body\n                     (StringReader.)\n                     (enlive/html-resource)\n                     (enlive/select selector)\n                     ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes))))]\n        (doseq [url urls]\n          (println url))))))\n\n\n(defn aa []\n  (let [f1 (dddd\n            [:div.td-module-thumb :a]\n            #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        f2 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))\n        f3 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))]\n    (f1 1 1)\n    (f2 1 1)\n    (f3 1 1)))\n\n(aa)&quot;, :offset 949, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;\n(defn dddd [selector next-page-url-generator]\n  (fn [start-page end-page]\n    (for [page (range start-page end-page)]\n      (let [source-url (next-page-url-generator page)\n            urls (-&gt; (http/get source-url)\n                     :body\n                     (StringReader.)\n                     (enlive/html-resource)\n                     (enlive/select selector)\n                     ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes))))]\n        (doseq [url urls]\n          (println url))))))\n\n\n(defn aa []\n  (let [f1 (dddd\n            [:div.td-module-thumb :a]\n            #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        f2 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))\n        f3 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))]\n    (f1 1 2)\n    (f2 1 2)\n    (f3 1 2)))\n\n(aa)&quot;, :offset 950, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;(defn aa []\n  (let [f1 (dddd\n            [:div.td-module-thumb :a]\n            #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        f2 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))\n        f3 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))]\n    (f1 1 2)\n    #_(f2 1 2)\n    #_(f3 1 2)))\n\n(aa)&quot;, :offset 452, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;(defn aa []\n  (let [f1 (dddd\n            [:div.td-module-thumb :a]\n            #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        f2 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))\n        f3 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))]\n    #_(f1 1 2)\n    (f2 1 2)\n    #_(f3 1 2)))\n\n(aa)&quot;, :offset 452, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;\n(defn aa []\n  (let [f1 (dddd\n            [:div.td-module-thumb :a]\n            #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        f2 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))\n        f3 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))]\n    #_(f1 1 2)\n    #_(f2 1 2)\n    (f3 1 2)))\n\n(aa)&quot;, :offset 453, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;(defn dddd [selector next-page-url-generator]\n  (fn [start-page end-page]\n    (for [page (range start-page end-page)]\n      (println page)\n      #_(let [source-url (next-page-url-generator page)\n            urls (-&gt; (http/get source-url)\n                     :body\n                     (StringReader.)\n                     (enlive/html-resource)\n                     (enlive/select selector)\n                     ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes))))]\n        (doseq [url urls]\n          (println url))))))\n\n\n(defn aa []\n  (let [f1 (dddd\n            [:div.td-module-thumb :a]\n            #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        f2 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))\n        f3 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))]\n    (f1 1 2)\n    (f2 1 2)\n    (f3 1 2)))\n\n(aa)&quot;, :offset 972, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;(defn aa []\n  (let [f1 (dddd\n            [:div.td-module-thumb :a]\n            #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        f2 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))\n        f3 (dddd\n             [:div.td-module-thumb :a]\n             #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))]\n    (f1 0 1)\n    (f2 1 2)\n    (f3 2 3)))\n\n(aa)&quot;, :offset 448, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;(defn dddd []\n  (fn [start-page end-page]\n    (for [page (range start-page end-page)]\n      (println page)\n      #_(let [source-url (next-page-url-generator page)\n            urls (-&gt; (http/get source-url)\n                     :body\n                     (StringReader.)\n                     (enlive/html-resource)\n                     (enlive/select selector)\n                     ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes))))]\n        (doseq [url urls]\n          (println url))))))\n\n\n(defn aa []\n  (let [f1 (dddd)\n        f2 (dddd)\n        f3 (dddd)]\n    (f1 0 1)\n    (f2 1 2)\n    (f3 2 3)))\n\n(aa)&quot;, :offset 605, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;(defn funa []\n  (fn [start end]\n    (for [page (range start end)]\n      (println page))))\n\n\n(defn aa []\n  (let [f1 (funa)\n        f2 (funa)\n        f3 (funa)]\n    (f1 0 1)\n    (f2 0 2)\n    (f3 0 3)))\n\n(aa)&quot;, :offset 205, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;\n(defn funa []\n  (fn [start end]\n    (doseq [page (range start end)]\n      (println page))\n    #_(for [page (range start end)]\n      (println page))))\n\n\n(defn aa []\n  (let [f1 (funa)\n        f2 (funa)\n        f3 (funa)]\n    (f1 0 1)\n    (f2 0 2)\n    (f3 0 3)))\n\n(aa)&quot;, :offset 266, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;(ns grapdata.ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [grapdata.ave40.db :refer :all]\n            [grapdata.ave40.utils :refer :all]\n            [grapdata.ave40.grap-article :as grap]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]\n            [clj-http.client :as http]]\n  (:import (java.io StringReader)))\n\n(defn parse-excel-data [list]\n  (cons (map name (keys (first list))) (map #(vals %) list)))\n\n#_(parse-excel-data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))\n\n#_(let [data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]})\n      wb (sheet/create-workbook \&quot;html\&quot; (parse-excel-data data))]\n  (sheet/save-workbook! \&quot;d:/exponents.xlsx\&quot; wb))\n\n(defn- split-trim [s]\n  (str/split s #\&quot;\\n|\\t+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n(defn run-extra []\n  (let [selector [:div.td-module-thumb :a]\n        grapper1 (grap/simple-grapper\n                   selector\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        grapper2 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/science/page/\&quot; %))\n        grapper3 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/business/page/\&quot; %))\n        grapper4 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/society/page/\&quot; %))\n        grapper5 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))\n        grapper6 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/deals/page/\&quot; %))\n        grapper7 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/legal/page/\&quot; %))\n        grapper8 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/opinion/page/\&quot; %))\n        grapper9 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))\n        grapper10 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))]\n    #_(grapper1 1 37)\n    #_(grapper2 1 20)\n    #_(grapper3 1 15)\n    #_(grapper4 1 11)\n    (future (grapper9 1 13)\n            (grapper10 1 11))\n    (future (grapper5 1 15)\n            (grapper6 1 2)\n            (grapper7 1 5)\n            (grapper8 1 4))))\n\n(defn run-extra2 []\n  (let [grapper (grap/simple-grapper\n                  [:div.td-module-thumb :a]\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))]\n    (grapper 1 37)))\n\n&quot;, :offset 2985, :ns &quot;grapdata.core&quot;} {:command &quot;(run-extra)&quot;, :offset 11, :ns &quot;grapdata.ave40.extra&quot;} {:command &quot;(ns grapdata.ave40.grap-article\n                  (:require [clj-http.client :as http]\n                            [clojure.string :as str]\n                            [grapdata.ave40.db :refer :all]\n                            [grapdata.ave40.utils :refer :all]\n                            [net.cgrand.enlive-html :as enlive]\n                            [clojure.tools.logging :as log]\n                            [clojure.walk :as w]\n                            [clojure.data])\n                  (:import (java.io StringReader)))\n\n\n(def unvisited-urls (ref []))\n(def source-htmls (ref []))\n(def error_records (atom []))\n\n(defn- add-unvisited [url]\n  (if-not (some #{url} @unvisited-urls)\n    (alter unvisited-urls conj url)))\n\n(defn- pop-unvisited []\n  (when-let [url (peek @unvisited-urls)]\n    (alter unvisited-urls pop)\n    url))\n\n(defn- add-source-html [url html]\n  (alter source-htmls conj {:url url :html html :created_at (quot (System/currentTimeMillis) 1000)}))\n\n\n(defn- add-error-records [url error_code error_body]\n  (swap! error_records conj {:url url :error_code error_code :error_body error_body}))\n\n\n(defn- is-visited? [url]\n  (lazy-contains? (map #(:url %) @source-htmls) url))\n\n(defn- visited [url]\n  (let [resp (http/get url)\n        body (:body resp)]\n    (if\n      (= 200 (:status resp))\n      body\n      (add-error-records url (:status resp) body))))\n\n\n; 持久化\n(defn- add-save-watch []\n  (add-watch unvisited-urls :nvu-save-watch\n             (fn [_ _ old new]\n               (if (&lt; (count new) (count old))                ; 删除记录的情况\n                 (if-let [diff (first (clojure.data/diff old new))]\n                   (delete-table-data-by-url\n                     article-db\n                     {:table \&quot;unvisited_urls\&quot;\n                      :urls (remove nil? diff)})))\n               (if (&gt; (count new) (count old))                ; 添加记录的情况\n                 (if-let [diff (first (clojure.data/diff new old))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;unvisited_urls\&quot;\n                      :cols [\&quot;url\&quot;]\n                      :datas (map #(conj [] %) (remove nil? diff))})))))\n\n  (add-watch source-htmls :source-htmls-save-watch\n             (fn [_ _ old new]\n               (if (&gt; (count new) (count old))\n                 (if-let [diff (w/stringify-keys (remove nil? (first (clojure.data/diff new old))))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;source_article\&quot;\n                      :cols (keys (first diff))\n                      :datas (map #(vals %) diff)})))))\n\n  (add-watch error_records :error_records-save-watch\n             (fn [_ _ old new]\n               (if (&gt; (count new) (count old))\n                 (if-let [diff (w/stringify-keys (remove nil? (first (clojure.data/diff new old))))]\n                   (insert-table-tuple\n                     article-db\n                     {:table \&quot;error_records\&quot;\n                      :cols (keys (first diff))\n                      :datas (map #(vals %) diff)}))))))\n\n\n(defn- ignore-url [url]\n  (let [up-url (str/upper-case url)]\n    (or (str/ends-with? up-url \&quot;.JPG\&quot;)\n        (str/ends-with? up-url \&quot;.PNG\&quot;)\n        (str/ends-with? up-url \&quot;.GIF\&quot;)\n        (str/ends-with? up-url \&quot;.PDF\&quot;)\n        (str/ends-with? up-url \&quot;.XML\&quot;)\n        (str/ends-with? up-url \&quot;.MP4\&quot;)\n        (str/ends-with? up-url \&quot;.RMVB\&quot;)\n        (not (str/starts-with? url \&quot;https://fr.vapingpost.com\&quot;)))))\n\n(defn- next-url-parser\n  \&quot;解析需要访问的urls\&quot;\n  [html]\n  (-&gt; html\n      (StringReader.)\n      (enlive/html-resource)\n      (enlive/select [:a])\n      ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes)))\n      ((fn [urls]\n         (remove #(or\n                    (nil? %)\n                    (ignore-url %))\n                 urls)))\n      ((fn [urls]\n         (map #(-&gt; %\n                   (str/split #\&quot;#\&quot;)\n                   (first)\n                   ((fn [url] (if (str/ends-with? url \&quot;/\&quot;) url (str url \&quot;/\&quot;)))))\n              urls)))))\n\n(defn- init-data\n  []\n  (let [url-list (select-all article-db {:table \&quot;unvisited_urls\&quot;})\n        html-list (select-all article-db {:table \&quot;source_article\&quot; :cols [\&quot;url\&quot;] :where \&quot;url like 'https://fr.vapingpost.com%'\&quot;})]\n    (dosync (ref-set unvisited-urls (into [] (map #(:url %) url-list))))\n    (dosync (ref-set source-htmls (into [] html-list)))\n    (add-save-watch)))\n\n\n(defn grap-task\n  []\n  (when-let [url (dosync (pop-unvisited))]\n    (try\n      (dosync\n        (when-not (is-visited? url)\n          (log/info (str \&quot;visiting: \&quot; url))\n          (let [html (visited url)]\n            (add-source-html url html)\n            (when-let [next-urls (next-url-parser html)]\n              (doseq [next-url next-urls]\n                (add-unvisited next-url))))))\n      (catch Exception e\n        (log/error e)\n        (add-error-records url nil (str e))))))\n\n(def continue (atom true))\n\n(defn do-grap\n  []\n  (init-data)\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task)))\n  (future (while @continue (grap-task))))\n\n(defn stop-task []\n  (reset! continue false))\n\n(defn restart-task []\n  (reset! continue true)\n  (do-grap))\n\n(defn first-run-task [url]\n  (dosync (add-unvisited url))\n  (do-grap))\n\n\n;; 简易版本抓取\n(defn simple-grapper [selector next-page-url-generator]\n  (fn [start-page end-page]\n    (doseq [page (range start-page end-page)]\n      (let [source-url (next-page-url-generator page)\n            urls (-&gt; (http/get source-url)\n                     :body\n                     (StringReader.)\n                     (enlive/html-resource)\n                     (enlive/select selector)\n                     ((fn [a-nodes] (map #(-&gt; % :attrs :href) a-nodes))))]\n        (doseq [url urls]\n          (println url)\n          (if (empty? (select-all article-db {:table \&quot;source_article\&quot; :where (str \&quot;url='\&quot; url \&quot;'\&quot;)}))\n            (let [html (-&gt; url\n                           (http/get)\n                           :body)]\n              (data-insert!\n                \&quot;source_article\&quot;\n                {\&quot;url\&quot; url \&quot;html\&quot; html \&quot;created_at\&quot; (quot (System/currentTimeMillis) 1000)}))))))))\n\n(defn do-simple-grap []\n  (let [grapper (simple-grapper\n                  [:header.entry-header :h2.entry-title :a]\n                  #(str \&quot;http://www.vaporvanity.com/category/news/page/\&quot; %))]\n    (grapper 1 66)))\n&quot;, :offset 6410, :ns &quot;grapdata.core&quot;} {:command &quot;(ns grapdata.ave40.extra\n  [:require [dk.ative.docjure.spreadsheet :as sheet]\n            [grapdata.ave40.db :refer :all]\n            [grapdata.ave40.utils :refer :all]\n            [grapdata.ave40.grap-article :as grap]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.string :as str]\n            [clj-http.client :as http]]\n  (:import (java.io StringReader)))\n\n(defn parse-excel-data [list]\n  (cons (map name (keys (first list))) (map #(vals %) list)))\n\n#_(parse-excel-data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]}))\n\n#_(let [data (select-all article-db {:table \&quot;cms_block\&quot; :cols [\&quot;block_id\&quot; \&quot;title\&quot; \&quot;content\&quot;]})\n      wb (sheet/create-workbook \&quot;html\&quot; (parse-excel-data data))]\n  (sheet/save-workbook! \&quot;d:/exponents.xlsx\&quot; wb))\n\n(defn- split-trim [s]\n  (str/split s #\&quot;\\n|\\t+\&quot;)\n  #_(filter not-empty (map (fn [pie]\n                 (let [temp (str/trim pie)]\n                   (if-not (empty? temp) temp))) (str/split s #\&quot;\\n\&quot;))))\n\n(defn run-extra []\n  (let [selector [:div.td-module-thumb :a]\n        grapper1 (grap/simple-grapper\n                   selector\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))\n        grapper2 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/science/page/\&quot; %))\n        grapper3 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/business/page/\&quot; %))\n        grapper4 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/society/page/\&quot; %))\n        grapper5 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/community/page/\&quot; %))\n        grapper6 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/deals/page/\&quot; %))\n        grapper7 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/legal/page/\&quot; %))\n        grapper8 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/opinion/page/\&quot; %))\n        grapper9 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/press/page/\&quot; %))\n        grapper10 (grap/simple-grapper\n                   selector\n                   #(str \&quot;https://www.vapingpost.com/category/review/page/\&quot; %))]\n    #_(grapper1 1 37)\n    #_(grapper2 1 20)\n    #_(grapper3 1 15)\n    #_(grapper4 1 11)\n    (future (grapper9 1 13)\n            (grapper10 1 11))\n    (future (grapper5 1 15)\n            (grapper6 1 2)\n            (grapper7 1 5)\n            (grapper8 1 4))))\n\n(defn run-extra2 []\n  (let [grapper (grap/simple-grapper\n                  [:div.td-module-thumb :a]\n                  #(str \&quot;https://www.vapingpost.com/category/politics/page/\&quot; %))]\n    (grapper 1 37)))\n\n(run-extra)&quot;, :offset 2996, :ns &quot;grapdata.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.repl">
    <configuration default="true" type="Applet" factoryName="Applet">
      <option name="HTML_USED" value="false" />
      <option name="WIDTH" value="400" />
      <option name="HEIGHT" value="300" />
      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
      <module />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
    </configuration>
    <configuration default="true" type="ClojureScriptRunConfiguration" factoryName="Clojure Script">
      <module name="grapdata" />
      <setting name="path" value="" />
      <setting name="namespace" value="" />
      <setting name="useLein" value="false" />
      <setting name="profiles" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$" />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="TEST_OBJECT" value="class" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <envs />
      <patterns />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="grapdata" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
    </configuration>
    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType" factoryName="Plugin">
      <module name="" />
      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
      <option name="PROGRAM_PARAMETERS" />
      <predefined_log_file id="idea.log" enabled="true" />
    </configuration>
    <configuration default="true" type="TestNG" factoryName="TestNG">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="SUITE_NAME" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="GROUP_NAME" />
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <option name="OUTPUT_DIRECTORY" />
      <option name="ANNOTATION_TYPE" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <option name="USE_DEFAULT_REPORTERS" value="false" />
      <option name="PROPERTIES_FILE" />
      <envs />
      <properties />
      <listeners />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="grapdata" />
    </configuration>
    <configuration name="repl" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="grapdata" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
    </configuration>
  </component>
  <component name="ShelveChangesManager" show_recycled="false">
    <option name="remove_strategy" value="false" />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="dc780e7a-1e24-472c-bf50-b9198d816e36" name="Default" comment="" />
      <created>1507865355094</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1507865355094</updated>
    </task>
    <servers />
  </component>
  <component name="TodoView">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="-8" y="-8" width="1936" height="1056" extended-state="6" />
    <layout>
      <window_info id="Palette" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="DB Execution Console" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32934782" sideWeight="0.5021322" order="7" side_tool="true" content_ui="tabs" />
      <window_info id="Maven Projects" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="REPL" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.32995737" sideWeight="0.5141304" order="3" side_tool="true" content_ui="tabs" />
      <window_info id="Leiningen" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32995737" sideWeight="0.48586956" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Tool" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="MaxCompute Job" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="MaxCompute Job Explorer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="UI Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="MaxCompute Project Explorer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32934782" sideWeight="0.4978678" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="DB Browser" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Palette&#9;" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Image Layers" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Analysis" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32934782" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32934782" sideWeight="0.4978678" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="true" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.2553305" sideWeight="0.5" order="0" side_tool="false" content_ui="combo" />
      <window_info id="MaxCompute Console" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Theme Preview" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="true" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
    </layout>
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <option name="time" value="1" />
    </breakpoint-manager>
    <watches-manager />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/resources/sql/article.sql">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1170">
          <caret line="65" column="9" lean-forward="false" selection-start-line="65" selection-start-column="9" selection-end-line="65" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/article.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="4248">
          <caret line="236" column="0" lean-forward="false" selection-start-line="236" selection-start-column="0" selection-end-line="236" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/article.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="900">
          <caret line="50" column="0" lean-forward="false" selection-start-line="50" selection-start-column="0" selection-end-line="50" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/grap_article.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="3312">
          <caret line="184" column="6" lean-forward="false" selection-start-line="184" selection-start-column="6" selection-end-line="184" selection-end-column="6" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/extra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1278">
          <caret line="71" column="28" lean-forward="false" selection-start-line="71" selection-start-column="28" selection-end-line="71" selection-end-column="28" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="324">
          <caret line="18" column="22" lean-forward="true" selection-start-line="18" selection-start-column="22" selection-end-line="18" selection-end-column="22" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/resources/sql/article.sql">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1170">
          <caret line="65" column="9" lean-forward="false" selection-start-line="65" selection-start-column="9" selection-end-line="65" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/article.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="4248">
          <caret line="236" column="0" lean-forward="false" selection-start-line="236" selection-start-column="0" selection-end-line="236" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/grap_article.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="3312">
          <caret line="184" column="6" lean-forward="false" selection-start-line="184" selection-start-column="6" selection-end-line="184" selection-end-column="6" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/article.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="900">
          <caret line="50" column="0" lean-forward="false" selection-start-line="50" selection-start-column="0" selection-end-line="50" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/extra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1278">
          <caret line="71" column="28" lean-forward="false" selection-start-line="71" selection-start-column="28" selection-end-line="71" selection-end-column="28" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="180">
          <caret line="10" column="13" lean-forward="false" selection-start-line="10" selection-start-column="13" selection-end-line="10" selection-end-column="13" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="576">
          <caret line="32" column="35" lean-forward="true" selection-start-line="32" selection-start-column="35" selection-end-line="32" selection-end-column="35" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/resources/sql/article.sql">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1170">
          <caret line="65" column="9" lean-forward="false" selection-start-line="65" selection-start-column="9" selection-end-line="65" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/article.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="268">
          <caret line="208" column="11" lean-forward="true" selection-start-line="208" selection-start-column="11" selection-end-line="208" selection-end-column="11" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="18">
          <caret line="1" column="13" lean-forward="false" selection-start-line="1" selection-start-column="13" selection-end-line="1" selection-end-column="21" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/grap_image.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="54">
          <caret line="3" column="22" lean-forward="false" selection-start-line="3" selection-start-column="22" selection-end-line="3" selection-end-column="22" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/utils.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="90">
          <caret line="5" column="33" lean-forward="true" selection-start-line="5" selection-start-column="33" selection-end-line="5" selection-end-column="33" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/manager.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="18">
          <caret line="1" column="22" lean-forward="false" selection-start-line="1" selection-start-column="22" selection-end-line="1" selection-end-column="22" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/db.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="252">
          <caret line="14" column="59" lean-forward="true" selection-start-line="14" selection-start-column="59" selection-end-line="14" selection-end-column="59" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/grap_article.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="390">
          <caret line="167" column="53" lean-forward="true" selection-start-line="167" selection-start-column="53" selection-end-line="167" selection-end-column="53" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/push.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="772">
          <caret line="62" column="0" lean-forward="true" selection-start-line="62" selection-start-column="0" selection-end-line="62" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/article.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="772">
          <caret line="62" column="0" lean-forward="true" selection-start-line="62" selection-start-column="0" selection-end-line="62" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/spinner.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="628">
          <caret line="95" column="22" lean-forward="true" selection-start-line="95" selection-start-column="22" selection-end-line="95" selection-end-column="22" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/ave40/extra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="664">
          <caret line="55" column="38" lean-forward="true" selection-start-line="55" selection-start-column="38" selection-end-line="55" selection-end-column="38" />
          <folding />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>