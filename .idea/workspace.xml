<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="842f1f30-5306-42cb-bbaf-cb86e780eb0d" name="Default" comment="">
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/resources/sql/image.sql" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/src/ave40/article.clj" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/src/ave40/db.clj" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/src/ave40/grap_article.clj" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/src/ave40/grap_image.clj" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/src/ave40/manager.clj" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/src/ave40/push.clj" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/src/ave40/spinner.clj" />
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/src/ave40/utils.clj" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/.idea/workspace.xml" afterPath="$PROJECT_DIR$/.idea/workspace.xml" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/project.clj" afterPath="$PROJECT_DIR$/project.clj" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/resources/sql/article.sql" afterPath="$PROJECT_DIR$/resources/sql/article.sql" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/grapdata/core.clj" afterPath="$PROJECT_DIR$/src/grapdata/core.clj" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/learn/article.clj" afterPath="$PROJECT_DIR$/src/learn/article.clj" />
      <change type="MOVED" beforePath="$PROJECT_DIR$/src/log4j.xml" afterPath="$PROJECT_DIR$/src/log4j.properties" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file leaf-file-name="db.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/ave40/db.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="288">
              <caret line="16" column="18" lean-forward="false" selection-start-line="16" selection-start-column="18" selection-end-line="16" selection-end-column="18" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="grap_article.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/ave40/grap_article.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="-332">
              <caret line="29" column="52" lean-forward="true" selection-start-line="29" selection-start-column="52" selection-end-line="29" selection-end-column="52" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="article.clj" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/learn/article.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="786">
              <caret line="236" column="0" lean-forward="true" selection-start-line="236" selection-start-column="0" selection-end-line="236" selection-end-column="0" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="push.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/ave40/push.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="1098">
              <caret line="61" column="36" lean-forward="false" selection-start-line="61" selection-start-column="36" selection-end-line="61" selection-end-column="36" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="spinner.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/ave40/spinner.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="553">
              <caret line="90" column="31" lean-forward="true" selection-start-line="90" selection-start-column="31" selection-end-line="90" selection-end-column="31" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="core.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/grapdata/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="162">
              <caret line="9" column="9" lean-forward="false" selection-start-line="9" selection-start-column="9" selection-end-line="9" selection-end-column="9" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="article.sql" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/resources/sql/article.sql">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="1170">
              <caret line="65" column="9" lean-forward="false" selection-start-line="65" selection-start-column="9" selection-end-line="65" selection-end-column="18" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>json</find>
      <find>to-str</find>
      <find>original-article</find>
      <find>get-all-article-html</find>
      <find>attr</find>
      <find>clojure.xml</find>
      <find>sets</find>
      <find>change-article</find>
      <find>:proxy-port</find>
      <find>proxy-port</find>
      <find>update-data-by-id</find>
      <find>lazy-contains</find>
      <find>next-grap-url</find>
      <find>insert-table-data</find>
      <find>StringReader</find>
      <find>split-content-len</find>
      <find>conta</find>
      <find>set</find>
      <find>log</find>
      <find>lojure.data</find>
      <find>data</find>
      <find>404 Page</find>
      <find>articles</find>
      <find>url</find>
      <find>source_url</find>
      <find>update</find>
      <find>lazy-contains?</find>
      <find>select-article2-limit-10</find>
      <find>create-spinner</find>
      <find>apiQuota</find>
    </findStrings>
    <dirStrings>
      <dir>E:\grapdata\src\ave40</dir>
    </dirStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GradleLocalSettings">
    <option name="externalProjectsViewState">
      <projects_view />
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/phantomjsdriver.log" />
        <option value="$PROJECT_DIR$/src/log4j.xml" />
        <option value="$PROJECT_DIR$/src/datawarehouse/dbsqldetail.clj" />
        <option value="$PROJECT_DIR$/resources/name/female-names.txt" />
        <option value="$PROJECT_DIR$/resources/name/male-names.txt" />
        <option value="$PROJECT_DIR$/resources/name/name.txt" />
        <option value="$PROJECT_DIR$/src/learn/name.clj" />
        <option value="$PROJECT_DIR$/resources/sql/mail.sql" />
        <option value="$PROJECT_DIR$/src/dbconfig.clj" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/src/learn/email.clj" />
        <option value="$PROJECT_DIR$/resources/sql/users.sql" />
        <option value="$PROJECT_DIR$/src/learn/db.clj" />
        <option value="$PROJECT_DIR$/src/learn/twitter.clj" />
        <option value="$PROJECT_DIR$/src/learn/facebook.clj" />
        <option value="$PROJECT_DIR$/resources/sql/wordpress.sql" />
        <option value="$PROJECT_DIR$/src/learn/wordpress.clj" />
        <option value="$MAVEN_REPOSITORY$/org/seleniumhq/selenium/selenium-firefox-driver/2.45.0/selenium-firefox-driver-2.45.0.jar!/org/openqa/selenium/firefox/FirefoxProfile.class" />
        <option value="$PROJECT_DIR$/src/learn/learndriverweb.clj" />
        <option value="$PROJECT_DIR$/src/learn/learnmongo.clj" />
        <option value="$PROJECT_DIR$/src/learn/newdriver.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/grap_engine.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/grap_executor.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/grap_protocols.clj" />
        <option value="$PROJECT_DIR$/src/task/common_task.clj" />
        <option value="$PROJECT_DIR$/src/pingtai/main.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/main.clj" />
        <option value="$PROJECT_DIR$/src/learn/phonecode.clj" />
        <option value="$PROJECT_DIR$/src/learn/utils.clj" />
        <option value="$PROJECT_DIR$/src/ave40/imgmanager.clj" />
        <option value="$PROJECT_DIR$/src/ave40/grap_img.clj" />
        <option value="$PROJECT_DIR$/src/log4j.properties" />
        <option value="$PROJECT_DIR$/src/ave40/utils.clj" />
        <option value="$PROJECT_DIR$/src/ave40/db.clj" />
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/ave40/grap_article.clj" />
        <option value="$PROJECT_DIR$/src/ave40/manager.clj" />
        <option value="$PROJECT_DIR$/src/ave40/article.clj" />
        <option value="$PROJECT_DIR$/resources/sql/article.sql" />
        <option value="$PROJECT_DIR$/src/learn/article.clj" />
        <option value="$PROJECT_DIR$/src/grapdata/core.clj" />
        <option value="$PROJECT_DIR$/src/ave40/push.clj" />
        <option value="$PROJECT_DIR$/src/ave40/spinner.clj" />
      </list>
    </option>
  </component>
  <component name="MavenProjectNavigator">
    <treeState>
      <expand />
      <select />
    </treeState>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="260" />
    <option name="y" value="20" />
    <option name="width" value="1400" />
    <option name="height" value="1000" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
      <flattenPackages />
      <showMembers />
      <showModules />
      <showLibraryContents />
      <hideEmptyPackages />
      <abbreviatePackageNames />
      <autoscrollToSource />
      <autoscrollFromSource />
      <sortByType />
      <manualOrder />
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="grapdata" type="b2602c69:ProjectViewProjectNode" />
              <item name="grapdata" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="grapdata" type="b2602c69:ProjectViewProjectNode" />
              <item name="grapdata" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="grapdata" type="b2602c69:ProjectViewProjectNode" />
              <item name="grapdata" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="ave40" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="grapdata" type="b2602c69:ProjectViewProjectNode" />
              <item name="grapdata" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="learn" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="AndroidView" />
      <pane id="PackagesPane">
        <subPane>
          <expand>
            <path>
              <item name="grapdata" type="58d84e3e:PackageViewProjectNode" />
              <item name="grapdata" type="616d4139:PackageViewModuleNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scratches" />
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="settings.editor.selected.configurable" value="configurable.group.editor" />
    <property name="cursive.last.file.extension.E\:/grapdata/src" value="clj" />
    <property name="last_opened_file_path" value="E:/grap" />
  </component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="E:\grapdata\src\grapdata" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="E:\grapdata\src" />
    </key>
  </component>
  <component name="ReplState" timestamp="1507806567265">{:repl-history {:ide [], :local [{:command &quot;(defn ddd [html]\n  (let [html-nodes (-&gt; html\n                       (StringReader.)\n                       (enlive/html-resource))]\n    html-nodes))\n\n(ddd (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=14\&quot;}))))&quot;, :offset 236, :ns &quot;ave40.article&quot;} {:command &quot;\n(defn ddd [html]\n  (let [html-nodes (-&gt; html\n                       (StringReader.)\n                       (enlive/html-resource))]\n    (-&gt; html-nodes\n        (enlive/select [:a]))))\n\n(ddd (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=14\&quot;}))))&quot;, :offset 271, :ns &quot;ave40.article&quot;} {:command &quot;(defn ddd [html]\n  (let [html-nodes (-&gt; html\n                       (StringReader.)\n                       (enlive/html-resource))]\n    (-&gt; html-nodes\n        (enlive/select [:.entry-header :.entry-title]))))\n\n(ddd (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=14\&quot;}))))&quot;, :offset 296, :ns &quot;ave40.article&quot;} {:command &quot;\n(defn ddd [html]\n  (let [html-nodes (-&gt; html\n                       (StringReader.)\n                       (enlive/html-resource))]\n    (-&gt; html-nodes\n        (enlive/select [:header.entry-header :&gt; :h1.entry-title]))))\n\n(ddd (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=14\&quot;}))))&quot;, :offset 308, :ns &quot;ave40.article&quot;} {:command &quot;(defn ddd [html]\n  (let [html-nodes (-&gt; html\n                       (StringReader.)\n                       (enlive/html-resource))]\n    (-&gt; html-nodes\n        (enlive/select [:header.entry-header]))))\n\n(ddd (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=14\&quot;}))))&quot;, :offset 288, :ns &quot;ave40.article&quot;} {:command &quot;(defn ddd [html]\n  (let [html-nodes (-&gt; html\n                       (StringReader.)\n                       (enlive/html-resource))]\n    (-&gt; html-nodes\n        (enlive/select [:header.entry-header :h1.entry-title]))))\n\n(ddd (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=14\&quot;}))))&quot;, :offset 304, :ns &quot;ave40.article&quot;} {:command &quot;(defn ddd [html]\n  (let [html-nodes (-&gt; html\n                       (StringReader.)\n                       (enlive/html-resource))]\n    (-&gt; html-nodes\n        (enlive/select [:h1.entry-title]))))\n\n(ddd (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=14\&quot;}))))&quot;, :offset 283, :ns &quot;ave40.article&quot;} {:command &quot;(defn ddd [html]\n  (let [html-nodes (-&gt; html\n                       (StringReader.)\n                       (enlive/html-resource))]\n    (-&gt; html-nodes\n        (enlive/select [:h1]))))\n\n(ddd (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=14\&quot;}))))&quot;, :offset 271, :ns &quot;ave40.article&quot;} {:command &quot;(ddd (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=29\&quot;}))))&quot;, :offset 86, :ns &quot;ave40.article&quot;} {:command &quot;(defn ddd [html]\n  (let [html-nodes (-&gt; html\n                       (StringReader.)\n                       (enlive/html-resource))]\n    (-&gt; html-nodes\n        (enlive/select [:h1.entry-title]))))\n\n(ddd (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=29\&quot;}))))&quot;, :offset 283, :ns &quot;ave40.article&quot;} {:command &quot;(defn ddd [html]\n  (let [html-nodes (-&gt; html\n                       (StringReader.)\n                       (enlive/html-resource))]\n    (-&gt; html-nodes\n        (enlive/select [:header.entry-header :h1.entry-title]))))\n\n(ddd (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=29\&quot;}))))&quot;, :offset 304, :ns &quot;ave40.article&quot;} {:command &quot;(defn ddd [html]\n  (let [html-nodes (-&gt; html\n                       (StringReader.)\n                       (enlive/html-resource))]\n    (-&gt; html-nodes\n        (enlive/select [:header.entry-header :h1.entry-title])\n        (enlive/text))))\n\n(ddd (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=29\&quot;}))))&quot;, :offset 326, :ns &quot;ave40.article&quot;} {:command &quot;(defn ddd [html]\n  (let [html-nodes (-&gt; html\n                       (StringReader.)\n                       (enlive/html-resource))]\n    (-&gt; html-nodes\n        (enlive/select [:header.entry-header :h1.entry-title])\n        first\n        (enlive/text))))\n\n(ddd (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=29\&quot;}))))&quot;, :offset 340, :ns &quot;ave40.article&quot;} {:command &quot;(map #{println %} {:a 1 :b 2})&quot;, :offset 30, :ns &quot;ave40.article&quot;} {:command &quot;(map #(println %) {:a 1 :b 2})&quot;, :offset 30, :ns &quot;ave40.article&quot;} {:command &quot;(for [[a b] {:a 1 :b 3}] (println a))&quot;, :offset 37, :ns &quot;ave40.article&quot;} {:command &quot;(for [[a b] {:a 1 :b 3}] {a b})&quot;, :offset 31, :ns &quot;ave40.article&quot;} {:command &quot;(defn parse-article [selectors]\n  (fn [html]\n    (for [[k selector] selectors]\n      (let [html-nodes (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource))]\n        {k (-&gt; html-nodes\n               (enlive/select selector)\n               first\n               (enlive/text))}))))\n&quot;, :offset 328, :ns &quot;ave40.article&quot;} {:command &quot;((parse-article {:title [:header.entry-header :h1.entry-title]})\n  (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=29\&quot;}))))&quot;, :offset 148, :ns &quot;ave40.article&quot;} {:command &quot;\n(defn parse-article [selectors]\n  (fn [html]\n    (flatten (for [[k selector] selectors]\n       (let [html-nodes (-&gt; html\n                            (StringReader.)\n                            (enlive/html-resource))]\n         {k (-&gt; html-nodes\n                (enlive/select selector)\n                first\n                (enlive/text))})))))\n\n\n((parse-article {:title [:header.entry-header :h1.entry-title]})\n  (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=29\&quot;}))))&quot;, :offset 496, :ns &quot;ave40.article&quot;} {:command &quot;(defn parse-article [selectors]\n  (fn [html]\n    (for [[k selector] selectors]\n      (let [html-nodes (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource))]\n        {k (-&gt; html-nodes\n               (enlive/select selector)\n               first\n               (enlive/text))}))))\n\n\n((parse-article {:title [:header.entry-header :h1.entry-title]})\n  (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=29\&quot;}))))\n&quot;, :offset 479, :ns &quot;ave40.article&quot;} {:command &quot;\n((parse-article {:title [:header.entry-header :h1.entry-title] :content [:main.site-main :article]})\n  (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=31\&quot;}))))\n&quot;, :offset 186, :ns &quot;ave40.article&quot;} {:command &quot;\n\n((parse-article {:title [:header.entry-header :h1.entry-title] :content [:main.site-main :article :p]})\n  (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=31\&quot;}))))&quot;, :offset 189, :ns &quot;ave40.article&quot;} {:command &quot;(defn parse-article [selectors]\n  (fn [html]\n    (for [[k selector] selectors]\n      (let [html-nodes (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource))]\n        {k (-&gt; html-nodes\n               (enlive/select selector)\n               (enlive/text))}))))\n\n\n((parse-article {:title [:header.entry-header :h1.entry-title] :content [:main.site-main :article :p]})\n  (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=31\&quot;}))))\n&quot;, :offset 497, :ns &quot;ave40.article&quot;} {:command &quot;(defn parse-article [selectors]\n  (fn [html]\n    (for [[k selector] selectors]\n      (let [html-nodes (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource))]\n        {k (-&gt; html-nodes\n               (enlive/select selector)\n               first\n               (enlive/text))}))))\n\n\n((parse-article {:title [:header.entry-header :h1.entry-title] :content [:main.site-main :article :p]})\n  (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=31\&quot;}))))\n&quot;, :offset 518, :ns &quot;ave40.article&quot;} {:command &quot;(defn parse-article [selectors]\n  (fn [html]\n    (for [[k selector] selectors]\n      (let [html-nodes (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource))]\n        {k (-&gt; html-nodes\n               (enlive/select selector)\n               first\n               (enlive/text))}))))\n\n\n((parse-article {:title [:header.entry-header :h1.entry-title] :content [:main.site-main :article]})\n  (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=31\&quot;}))))\n&quot;, :offset 515, :ns &quot;ave40.article&quot;} {:command &quot;\n(defn parse-article [selectors]\n  (fn [html]\n    (for [[k selector] selectors]\n      (let [html-nodes (-&gt; html\n                           (StringReader.)\n                           (enlive/html-resource))]\n        {k (-&gt; html-nodes\n               (enlive/select selector)\n               (#(map (fn [n]\n                        (enlive/text n))\n                      %))\n               (#(str/join \&quot;\\n\&quot; %)))}))))\n\n\n((parse-article {:title [:header.entry-header :h1.entry-title] :content [:main.site-main :article]})\n  (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=31\&quot;}))))\n&quot;, :offset 599, :ns &quot;ave40.article&quot;} {:command &quot;\n((parse-article {:title [:header.entry-header :h1.entry-title] :content [:main.site-main :article :p]})\n  (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=31\&quot;}))))\n&quot;, :offset 189, :ns &quot;ave40.article&quot;} {:command &quot;\n\n((parse-article {:title [:header.entry-header :h1.entry-title] :content [:main.site-main :article #{:p :h2}]})\n  (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=31\&quot;}))))&quot;, :offset 196, :ns &quot;ave40.article&quot;} {:command &quot;(reduce #(println %) {:a 1 :b 2})&quot;, :offset 33, :ns &quot;ave40.article&quot;} {:command &quot;(reduce #(println %1) {:a 1 :b 2})&quot;, :offset 34, :ns &quot;ave40.article&quot;} {:command &quot;(reduce #(println %1) {:a 1 :b 2} [])&quot;, :offset 37, :ns &quot;ave40.article&quot;} {:command &quot;(reduce #(println %1) [] {:a 1 :b 2})&quot;, :offset 37, :ns &quot;ave40.article&quot;} {:command &quot;\n\n(defn parse-article [selectors]\n  (fn [html]\n    (reduce conj {} (for [[k selector] selectors]\n                        (let [html-nodes (-&gt; html\n                                             (StringReader.)\n                                             (enlive/html-resource))]\n                          {k (-&gt; html-nodes\n                                 (enlive/select selector)\n                                 (#(map (fn [n]\n                                          (enlive/text n))\n                                        %))\n                                 (#(str/join \&quot;\\n\&quot; %)))})))))\n\n\n\n((parse-article {:title [:header.entry-header :h1.entry-title] :content [:main.site-main :article #{:p :h2}]})\n  (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=31\&quot;}))))\n&quot;, :offset 790, :ns &quot;ave40.article&quot;} {:command &quot;(defn parse-article [selectors]\n  (fn [html]\n    (reduce\n      conj\n      {}\n      (for [[k selector] selectors]\n        (let [html-nodes (-&gt; html\n                             (StringReader.)\n                             (enlive/html-resource))]\n          {k (-&gt; html-nodes\n                 (enlive/select selector)\n                 (#(map (fn [n]\n                          (enlive/text n))\n                        %))\n                 (#(str/join \&quot;\\n\&quot; %)))})))))\n\n\n\n((parse-article {:title [:header.entry-header :h1.entry-title] :content [:main.site-main :article #{:p :h2}]})\n  (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=31\&quot;}))))\n&quot;, :offset 662, :ns &quot;ave40.article&quot;} {:command &quot;\n((parse-article {:title [:header.entry-header :h1.entry-title] :content [:main.site-main :article #{:p :h2}]})\n  (:html (first (select-all article-db {:table \&quot;source_article\&quot; :where \&quot;id=27\&quot;}))))&quot;, :offset 195, :ns &quot;ave40.article&quot;} {:command &quot;(defn do-parse-and-save [{:keys [domain selector cond]}]\n  (select-all article-db {:table \&quot;source_article\&quot; :field [\&quot;url\&quot;] :where (str \&quot;source_url like '\&quot; domain \&quot;%' and \&quot; cond)}))\n\n\n(do-parse-and-save {:domain \&quot;http://www.vaporvanity.com\&quot;\n                    :selector {:title [:header.entry-header :h1.entry-title]\n                               :content [:main.site-main :article #{:p :h2}]}\n                    :cond \&quot;html like '%entry-header overlay%' and html like '%&lt;article%'\&quot;})&quot;, :offset 485, :ns &quot;ave40.article&quot;} {:command &quot;(defn do-parse-and-save [{:keys [domain selector cond]}]\n  (select-all article-db {:table \&quot;source_article\&quot; :field [\&quot;url\&quot;] :where (str \&quot;url like '\&quot; domain \&quot;%' and \&quot; cond)}))\n\n\n(do-parse-and-save {:domain \&quot;http://www.vaporvanity.com\&quot;\n                    :selector {:title [:header.entry-header :h1.entry-title]\n                               :content [:main.site-main :article #{:p :h2}]}\n                    :cond \&quot;html like '%entry-header overlay%' and html like '%&lt;article%'\&quot;})\n&quot;, :offset 479, :ns &quot;ave40.article&quot;} {:command &quot;1&quot;, :offset 1, :ns &quot;grapdata.core&quot;} {:command &quot;(defn do-parse-and-save [{:keys [domain selector cond]}]\n  (select-all article-db {:table \&quot;source_article\&quot; :cols [\&quot;url\&quot;] :where (str \&quot;url like '\&quot; domain \&quot;%' and \&quot; cond)}))\n\n\n(do-parse-and-save {:domain \&quot;http://www.vaporvanity.com\&quot;\n                    :selector {:title [:header.entry-header :h1.entry-title]\n                               :content [:main.site-main :article #{:p :h2}]}\n                    :cond \&quot;html like '%entry-header overlay%' and html like '%&lt;article%'\&quot;})\n&quot;, :offset 478, :ns &quot;ave40.article&quot;} {:command &quot;\n(defn create-parser [selectors]\n  \&quot;从html提取信息\&quot;\n  (fn [html]\n    (reduce\n      conj\n      {}\n      (for [[k selector] selectors]\n        (let [html-nodes (-&gt; html\n                             (StringReader.)\n                             (enlive/html-resource))]\n          {k (-&gt; html-nodes\n                 (enlive/select selector)\n                 (#(map (fn [n]\n                          (enlive/text n))\n                        %))\n                 (#(str/join \&quot;\\n\&quot; %)))})))))&quot;, :offset 478, :ns &quot;ave40.article&quot;} {:command &quot;(merge {:a 1} {:b 2})&quot;, :offset 21, :ns &quot;ave40.article&quot;} {:command &quot;\n(defn do-parse-and-save [{:keys [domain selector cond]}]\n  (let [source-list (select-all article-db\n                                {:table \&quot;source_article\&quot;\n                                 :cols [\&quot;url\&quot; \&quot;html\&quot;]\n                                 :where (str \&quot;url like '\&quot; domain \&quot;%' and \&quot; cond)})\n        parser (create-parser selector)]\n    (doseq [source source-list]\n      (data-insert! \&quot;articles\&quot;\n                    (merge (parser (:html source))\n                           {:url (:url source)\n                            :grap_time (:created_at source)})))))\n\n\n\n(do-parse-and-save {:domain \&quot;http://www.vaporvanity.com\&quot;\n                    :selector {:title [:header.entry-header :h1.entry-title]\n                               :article [:main.site-main :article #{:p :h2}]}\n                    :cond \&quot;html like '%entry-header overlay%' and html like '%&lt;article%'\&quot;})\n&quot;, :offset 870, :ns &quot;ave40.article&quot;} {:command &quot;\n(defn do-parse-and-save [{:keys [domain selector cond]}]\n  (let [source-list (select-all article-db\n                                {:table \&quot;source_article\&quot;\n                                 :cols [\&quot;url\&quot; \&quot;html\&quot;]\n                                 :where (str \&quot;url like '\&quot; domain \&quot;%' and \&quot; cond)})\n        parser (create-parser selector)]\n    (doseq [source source-list]\n      (data-insert! \&quot;articles\&quot;\n                    (w/stringify-keys\n                      (merge (parser (:html source))\n                             {:url (:url source)\n                              :grap_time (:created_at source)}))))))\n\n\n\n(do-parse-and-save {:domain \&quot;http://www.vaporvanity.com\&quot;\n                    :selector {:title [:header.entry-header :h1.entry-title]\n                               :article [:main.site-main :article #{:p :h2}]}\n                    :cond \&quot;html like '%entry-header overlay%' and html like '%&lt;article%'\&quot;})\n&quot;, :offset 915, :ns &quot;ave40.article&quot;} {:command &quot;(ns ave40.article\n  (:require [clj-http.client :as http]\n            [ave40.db :refer :all]\n            [clojure.string :as str]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.walk :as w])\n  (:import (java.io StringReader)))\n\n&quot;, :offset 248, :ns &quot;grapdata.core&quot;} {:command &quot;(do-parse-and-save {:domain \&quot;http://www.vaporvanity.com\&quot;\n                    :selector {:title [:header.entry-header :h1.entry-title]\n                               :article [:main.site-main :article #{:p :h2}]}\n                    :cond \&quot;html like '%entry-header overlay%' and html like '%&lt;article%'\&quot;})&quot;, :offset 303, :ns &quot;ave40.article&quot;} {:command &quot;(ns ave40.article\n  (:require [clj-http.client :as http]\n            [ave40.db :refer :all]\n            [clojure.string :as str]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.walk :as w])\n  (:import (java.io StringReader)))\n\n\n(defn- push-article\n  \&quot;将文章推送到指定的博客\&quot;\n  [domain article-info]\n  (println (http/post \&quot;http://manage.ecigview.com/posts/create\&quot;\n                      {:form-params {:domain domain\n                                     :title (:title article-info)\n                                     :content (:article article-info)}})))\n\n(defn- add-image-to-article\n  \&quot;将图片加到文章中\&quot;\n  [info]\n  (let [url (:source_url (select-rand-image article-db))]\n    (update info :article #(str \&quot;&lt;img src=\\\&quot;\&quot; url \&quot;\\\&quot; style=\\\&quot;display:block;\\\&quot; /&gt;\&quot; %))))\n\n\n(defn- wrap-paragraph [text]\n  \&quot;包裹段落\&quot;\n  (apply str (map #(apply str (enlive/emit* ((enlive/wrap :p) %)))\n                  (str/split text #\&quot;\\n\&quot;))))\n\n\n(defn create-parser [selectors]\n  \&quot;从html提取信息\&quot;\n  (fn [html]\n    (reduce\n      conj\n      {}\n      (for [[k selector] selectors]\n        (let [html-nodes (-&gt; html\n                             (StringReader.)\n                             (enlive/html-resource))]\n          {k (-&gt; html-nodes\n                 (enlive/select selector)\n                 (#(map (fn [n]\n                          (enlive/text n))\n                        %))\n                 (#(str/join \&quot;\\n\&quot; %)))})))))\n\n\n(defn do-parse-and-save [{:keys [domain selector cond]}]\n  (let [source-list (select-all article-db\n                                {:table \&quot;source_article\&quot;\n                                 :cols [\&quot;url\&quot; \&quot;html\&quot;]\n                                 :where (str \&quot;url like '\&quot; domain \&quot;%' and \&quot; cond)})\n        parser (create-parser selector)]\n    (doseq [source source-list]\n      (data-insert! \&quot;articles\&quot;\n                    (w/stringify-keys\n                      (merge (parser (:html source))\n                             {:url (:url source)\n                              :grap_time (:created_at source)}))))))\n\n\n\n(do-parse-and-save {:domain \&quot;http://www.vaporvanity.com\&quot;\n                    :selector {:title [:header.entry-header :h1.entry-title]\n                               :article [:main.site-main :article #{:p :h2}]}\n                    :cond \&quot;html like '%entry-header overlay%' and html like '%&lt;article%'\&quot;})\n\n\n&quot;, :offset 2313, :ns &quot;grapdata.core&quot;} {:command &quot;\n\n(defn do-parse-and-save [{:keys [domain selector cond]}]\n  (let [source-list (select-all article-db\n                                {:table \&quot;source_article\&quot;\n                                 :where (str \&quot;url like '\&quot; domain \&quot;%' and \&quot; cond)})\n        parser (create-parser selector)]\n    (doseq [source source-list]\n      (data-insert! \&quot;articles\&quot;\n                    (w/stringify-keys\n                      (merge (parser (:html source))\n                             {:source_url (:url source)\n                              :grap_time (:created_at source)}))))))\n\n\n\n(do-parse-and-save {:domain \&quot;http://www.vaporvanity.com\&quot;\n                    :selector {:title [:header.entry-header :h1.entry-title]\n                               :article [:main.site-main :article #{:p :h2}]}\n                    :cond \&quot;html like '%entry-header overlay%' and html like '%&lt;article%'\&quot;})&quot;, :offset 868, :ns &quot;ave40.article&quot;} {:command &quot;(do-parse-and-save {:domain \&quot;http://vaping360.com\&quot;\n                    :selector {:title [:header.td-post-title :h1.entry-title]\n                               :article [:div.vc_column-inner]}\n                    :cond \&quot;html like '%entry-header overlay%' and html like '%td-post-content%'\&quot;})&quot;, :offset 291, :ns &quot;ave40.article&quot;} {:command &quot;(defn do-parse-and-save [{:keys [domain selector cond]}]\n  (let [source-list (select-all article-db\n                                {:table \&quot;source_article\&quot;\n                                 :where (str \&quot;url like '\&quot; domain \&quot;%' and \&quot; cond)})\n        parser (create-parser selector)]\n    (println (str \&quot;total:\&quot; (count source-list)))\n    (doseq [source source-list]\n      (data-insert! \&quot;articles\&quot;\n                    (w/stringify-keys\n                      (merge (parser (:html source))\n                             {:source_url (:url source)\n                              :grap_time (:created_at source)}))))))\n\n\n\n#_(do-parse-and-save {:domain \&quot;http://www.vaporvanity.com\&quot;\n                    :selector {:title [:header.entry-header :h1.entry-title]\n                               :article [:main.site-main :article #{:p :h2}]}\n                    :cond \&quot;html like '%entry-header overlay%' and html like '%&lt;article%'\&quot;})\n\n(do-parse-and-save {:domain \&quot;http://vaping360.com\&quot;\n                    :selector {:title [:header.td-post-title :h1.entry-title]\n                               :article [:div.vc_column-inner]}\n                    :cond \&quot;html like '%entry-header overlay%' and html like '%td-post-content%'\&quot;})&quot;, :offset 1210, :ns &quot;ave40.article&quot;} {:command &quot;(do-parse-and-save {:domain \&quot;http://vaping360.com\&quot;\n                    :selector {:title [:header.td-post-title :h1.entry-title]\n                               :article [:div.vc_column-inner]}\n                    :cond \&quot;html like '%entry-header%' and html like '%td-post-content%'\&quot;})&quot;, :offset 283, :ns &quot;ave40.article&quot;} {:command &quot;\n(do-parse-and-save {:domain \&quot;http://vaping360.com\&quot;\n                    :selector {:title [:header.td-post-title :h1.entry-title]\n                               :article [:div.vc_column-inner]}\n                    :cond \&quot;html like '%entry-header%'\&quot;})\n&quot;, :offset 251, :ns &quot;ave40.article&quot;} {:command &quot;(do-parse-and-save {:domain \&quot;http://vaping360.com\&quot;\n                    :selector {:title [:header.td-post-title :h1.entry-title]\n                               :article [:div.vc_column-inner]}\n                    :cond \&quot;html like '%entry-title%' and html like '%td-post-content%'\&quot;})&quot;, :offset 282, :ns &quot;ave40.article&quot;} {:command &quot;(ns ave40.manager\n  (:require [ave40.db :refer :all]\n            [clojure.tools.logging :as log]\n            [clojure.string :as string]))\n\n(defn copy-source-article [table]\n  (let [list (select-all article-db {:table table})]\n    (doseq [info list]\n      (data-insert! \&quot;source_article\&quot; {\&quot;url\&quot; (:url info) \&quot;html\&quot; (:html info)}))))\n\n(let [list (select-all article-db {:table \&quot;article2\&quot; :cols [\&quot;title\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]})]\n  (doseq [info list]\n    (update-data article-db {:table \&quot;articles\&quot;\n                             :updates {:spinner_title (:spinner_title info)\n                                       :spinner_article (:spinner_article info)}\n                             :where (str \&quot;title='\&quot; (:title info) \&quot;'\&quot;)})))&quot;, :offset 736, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.spinner\n  (:require [clj-http.client :as http]\n            [clojure.string :as str]\n            [ave40.db :refer :all]))\n\n(defn- split-content-len [content maxlen]\n  (reduce (fn [v sen]\n            (let [last-sen (last v)\n                  add-sen (str last-sen sen)]\n              (if (&lt; (count add-sen) maxlen) (conj (vec (drop-last v)) add-sen) (conj v sen))))\n          []\n          (map #(str % \\.) (str/split content #\&quot;\\.\&quot;))))\n\n(defn- spinner-login []\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params {:action \&quot;authenticate\&quot;\n                                           :format \&quot;xml\&quot;\n                                           :username \&quot;515462418@qq.com\&quot;\n                                           :password \&quot;40U30600U0034383W\&quot;}})\n                 :body)\n        session (re-find #\&quot;&lt;session&gt;([\\S\\s]*?)&lt;/session&gt;\&quot; resp)]\n    (if session (second session) (throw (Exception. \&quot;session is null\&quot;)))))\n\n\n(defn- spinner-post [params]\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params params})\n                 :body)\n        output (re-find #\&quot;&lt;output&gt;([\\S\\s]*?)&lt;/output&gt;\&quot; resp)]\n    (if output (second output) (throw (Exception. (str \&quot;error:\&quot; resp))))))\n\n(defn- spinner-synonyms [text session]\n  (spinner-post {:action \&quot;identifySynonyms\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-sentences [text session]\n  (spinner-post {:action \&quot;rewriteSentences\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-randomSpin [text session]\n  (spinner-post {:action \&quot;randomSpin\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-parse [session text]\n  (-&gt;\n    text\n    (spinner-synonyms session)\n    (spinner-randomSpin session)\n    (spinner-sentences session)\n    (spinner-randomSpin session)))\n\n(defn create-spinner []\n  (let [session (spinner-login)]\n    (partial spinner-parse session)))\n\n(defn run-spinner []\n  (let [articles (select-all article-db {:table \&quot;articles\&quot; :where \&quot;isnull(spinner_title)\&quot;})\n        spinner (create-spinner)]\n    (doseq [article articles]\n      (let [title (spinner (:title article))\n            pies (split-content-len (:article article) 4500)\n            content (str/join \&quot;\&quot; (for [p pies] (spinner p)))]\n        (println title)\n        (update-data\n          article-db\n          {:table \&quot;article2\&quot;\n           :updates {:spinner_title title :spinner_article content}\n           :where (str \&quot;id=\&quot; (:id article))})))))\n\n(run-spinner)&quot;, :offset 2663, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.spinner\n  (:require [clj-http.client :as http]\n            [clojure.string :as str]\n            [ave40.db :refer :all]))\n\n(defn- split-content-len [content maxlen]\n  (reduce (fn [v sen]\n            (let [last-sen (last v)\n                  add-sen (str last-sen sen)]\n              (if (&lt; (count add-sen) maxlen) (conj (vec (drop-last v)) add-sen) (conj v sen))))\n          []\n          (map #(str % \\.) (str/split content #\&quot;\\.\&quot;))))\n\n(defn- spinner-login []\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params {:action \&quot;authenticate\&quot;\n                                           :format \&quot;xml\&quot;\n                                           :username \&quot;515462418@qq.com\&quot;\n                                           :password \&quot;40U30600U0034383W\&quot;}})\n                 :body)\n        session (re-find #\&quot;&lt;session&gt;([\\S\\s]*?)&lt;/session&gt;\&quot; resp)]\n    (if session (second session) (throw (Exception. \&quot;session is null\&quot;)))))\n\n\n(defn- spinner-post [params]\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params params})\n                 :body)\n        output (re-find #\&quot;&lt;output&gt;([\\S\\s]*?)&lt;/output&gt;\&quot; resp)]\n    (if output (second output) (throw (Exception. (str \&quot;error:\&quot; resp))))))\n\n(defn- spinner-synonyms [text session]\n  (spinner-post {:action \&quot;identifySynonyms\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-sentences [text session]\n  (spinner-post {:action \&quot;rewriteSentences\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-randomSpin [text session]\n  (spinner-post {:action \&quot;randomSpin\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-parse [session text]\n  (-&gt;\n    text\n    (spinner-synonyms session)\n    (spinner-randomSpin session)\n    (spinner-sentences session)\n    (spinner-randomSpin session)))\n\n(defn create-spinner []\n  (let [session (spinner-login)]\n    (partial spinner-parse session)))\n\n(defn run-spinner []\n  (let [articles (select-all article-db {:table \&quot;articles\&quot; :where \&quot;isnull(spinner_title)\&quot;})\n        spinner (create-spinner)]\n    (doseq [article articles]\n      (let [title (spinner (:title article))\n            pies (split-content-len (:article article) 4500)\n            content (str/join \&quot;\&quot; (for [p pies] (spinner p)))]\n        (println (:title article))\n        (update-data\n          article-db\n          {:table \&quot;articles\&quot;\n           :updates {:spinner_title title :spinner_article content}\n           :where (str \&quot;id=\&quot; (:id article))})))))\n\n(run-spinner)&quot;, :offset 2674, :ns &quot;grapdata.core&quot;} {:command &quot;(defn run-spinner []\n  (let [articles (select-all article-db {:table \&quot;articles\&quot; :where \&quot;isnull(spinner_title)\&quot;})\n        spinner (create-spinner)]\n    (doseq [article articles]\n      (let [title (spinner (:title article))\n            pies (split-content-len (:article article) 4000)\n            content (str/join \&quot;\&quot; (for [p pies] (spinner p)))]\n        (println (:title article))\n        (update-data\n          article-db\n          {:table \&quot;articles\&quot;\n           :updates {:spinner_title title :spinner_article content}\n           :where (str \&quot;id=\&quot; (:id article))})))))\n\n(run-spinner)&quot;, :offset 583, :ns &quot;ave40.spinner&quot;} {:command &quot;(defn run-spinner []\n  (let [articles (select-all article-db {:table \&quot;articles\&quot; :where \&quot;isnull(spinner_title)\&quot;})\n        spinner (create-spinner)]\n    (doseq [article articles]\n      (let [title (spinner (:title article))\n            pies (split-content-len (:article article) 400)\n            content (str/join \&quot;\&quot; (for [p pies] (spinner p)))]\n        (println (:title article))\n        (update-data\n          article-db\n          {:table \&quot;articles\&quot;\n           :updates {:spinner_title title :spinner_article content}\n           :where (str \&quot;id=\&quot; (:id article))})))))\n\n(run-spinner)&quot;, :offset 582, :ns &quot;ave40.spinner&quot;} {:command &quot;(ns ave40.spinner\n  (:require [clj-http.client :as http]\n            [clojure.string :as str]\n            [clojure.tools.logging :as log]\n            [ave40.db :refer :all]))\n\n(defn- split-content-len [content maxlen]\n  (reduce (fn [v sen]\n            (let [last-sen (last v)\n                  add-sen (str last-sen sen)]\n              (if (&lt; (count add-sen) maxlen) (conj (vec (drop-last v)) add-sen) (conj v sen))))\n          []\n          (map #(str % \\.) (str/split content #\&quot;\\.\&quot;))))\n\n(defn- spinner-login []\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params {:action \&quot;authenticate\&quot;\n                                           :format \&quot;xml\&quot;\n                                           :username \&quot;515462418@qq.com\&quot;\n                                           :password \&quot;40U30600U0034383W\&quot;}})\n                 :body)\n        session (re-find #\&quot;&lt;session&gt;([\\S\\s]*?)&lt;/session&gt;\&quot; resp)]\n    (if session (second session) (throw (Exception. \&quot;session is null\&quot;)))))\n\n\n(defn- spinner-post [params]\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params params})\n                 :body)\n        output (re-find #\&quot;&lt;output&gt;([\\S\\s]*?)&lt;/output&gt;\&quot; resp)]\n    (if output (second output) (throw (Exception. (str \&quot;error:\&quot; resp))))))\n\n(defn- spinner-synonyms [text session]\n  (spinner-post {:action \&quot;identifySynonyms\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-sentences [text session]\n  (spinner-post {:action \&quot;rewriteSentences\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-randomSpin [text session]\n  (spinner-post {:action \&quot;randomSpin\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-parse [session text]\n  (try\n    (-&gt;\n      text\n      (spinner-synonyms session)\n      (spinner-randomSpin session)\n      (spinner-sentences session)\n      (spinner-randomSpin session))\n    (catch Exception e\n      (log/error e))))\n\n(defn create-spinner []\n  (let [session (spinner-login)]\n    (partial spinner-parse session)))\n\n(defn run-spinner []\n  (let [articles (select-all article-db {:table \&quot;articles\&quot; :where \&quot;isnull(spinner_title)\&quot;})\n        spinner (create-spinner)]\n    (doseq [article articles]\n      (let [title (spinner (:title article))\n            pies (split-content-len (:article article) 4000)\n            content (str/join \&quot;\&quot; (for [p pies] (spinner p)))]\n        (println (:title article))\n        (update-data\n          article-db\n          {:table \&quot;articles\&quot;\n           :updates {:spinner_title title :spinner_article content}\n           :where (str \&quot;id=\&quot; (:id article))})))))\n\n(run-spinner)&quot;, :offset 2782, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.push\n  (:require [clj-http.client :as http]\n            [ave40.db :refer :all]\n            [clojure.string :as str]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.walk :as w]))\n\n\n\n(defn- push-article\n  \&quot;将文章推送到指定的博客\&quot;\n  [domain article-info]\n  (println (http/post \&quot;http://manage.ecigview.com/posts/create\&quot;\n                      {:form-params {:domain domain\n                                     :title (:title article-info)\n                                     :content (:article article-info)}})))\n\n(defn- add-image-to-article\n  \&quot;将图片加到文章中\&quot;\n  [info]\n  (let [url (:source_url (select-rand-image article-db))]\n    (update info :article #(str \&quot;&lt;img src=\\\&quot;\&quot; url \&quot;\\\&quot; style=\\\&quot;display:block;\\\&quot; /&gt;\&quot; %))))\n\n\n(defn- wrap-paragraph [text]\n  \&quot;包裹段落\&quot;\n  (apply str (map #(apply str (enlive/emit* ((enlive/wrap :p) %)))\n                  (str/split text #\&quot;\\n\&quot;))))\n\n(defn- patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (println domain))&quot;, :offset 956, :ns &quot;grapdata.core&quot;} {:command &quot;(patch-push-article 1 2)&quot;, :offset 24, :ns &quot;ave40.push&quot;} {:command &quot;(defn- patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;not isnull(spinner_title) and not isnull(spinner_article) limit \&quot; amount)})]\n    article-list))\n\n(patch-push-article 1 2)&quot;, :offset 403, :ns &quot;ave40.push&quot;} {:command &quot;\n(defn- patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    article-list))\n\n(patch-push-article 1 2)&quot;, :offset 428, :ns &quot;ave40.push&quot;} {:command &quot;(ns ave40.push\n  (:require [clj-http.client :as http]\n            [ave40.db :refer :all]\n            [clojure.string :as str]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.walk :as w]\n            [clojure.tools.logging :as log]))\n\n\n\n(defn- push-article\n  \&quot;将文章推送到指定的博客\&quot;\n  [domain {:keys [title article]}]\n  (log/info (str \&quot;pushing to \&quot; domain \&quot;, article: \&quot; title))\n  (http/post \&quot;http://manage.ecigview.com/posts/create\&quot;\n             {:form-params {:domain domain\n                            :title title\n                            :content article}}))\n\n(defn- add-image-to-article\n  \&quot;将图片加到文章中\&quot;\n  [article]\n  (let [url (:source_url (select-rand-image article-db))]\n    #(str \&quot;&lt;img src=\\\&quot;\&quot; url \&quot;\\\&quot; style=\\\&quot;display:block;\\\&quot; /&gt;\&quot; article)))\n\n\n(defn- wrap-paragraph [text]\n  \&quot;包裹段落\&quot;\n  (apply str (map #(apply str (enlive/emit* ((enlive/wrap :p) %)))\n                  (str/split text #\&quot;\\n\&quot;))))\n\n(defn- patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    (doseq [article-info article-list]\n      (push-article domain {:title (:spinner_title article-info)\n                            :article (add-image-to-article (:spinner_article article-info))}))))\n\n(patch-push-article \&quot;www.ecigview.com\&quot; 1)&quot;, :offset 1537, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.push\n  (:require [clj-http.client :as http]\n            [ave40.db :refer :all]\n            [clojure.string :as str]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.walk :as w]\n            [clojure.tools.logging :as log]))\n\n\n\n(defn- push-article\n  \&quot;将文章推送到指定的博客\&quot;\n  [domain {:keys [title article]}]\n  (log/info (str \&quot;pushing to \&quot; domain \&quot;, article: \&quot; title))\n  (http/post \&quot;http://manage.ecigview.com/posts/create\&quot;\n             {:form-params {:domain domain\n                            :title title\n                            :content article}}))\n\n(defn- add-image-to-article\n  \&quot;将图片加到文章中\&quot;\n  [article]\n  (let [url (:source_url (select-rand-image article-db))]\n    #(str \&quot;&lt;img src=\\\&quot;\&quot; url \&quot;\\\&quot; style=\\\&quot;display:block;\\\&quot; /&gt;\&quot; article)))\n\n\n(defn- wrap-paragraph [text]\n  \&quot;包裹段落\&quot;\n  (apply str (map #(apply str (enlive/emit* ((enlive/wrap :p) %)))\n                  (str/split text #\&quot;\\n\&quot;))))\n\n(defn- patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    (doseq [article-info article-list]\n      (println {:title (:spinner_title article-info)\n                            :article (add-image-to-article (:spinner_article article-info))}))))\n\n(patch-push-article \&quot;www.ecigview.com\&quot; 1)&quot;, :offset 1525, :ns &quot;grapdata.core&quot;} {:command &quot;\n(defn- add-image-to-article\n  \&quot;将图片加到文章中\&quot;\n  [article]\n  (let [url (:source_url (select-rand-image article-db))]\n    (str \&quot;&lt;img src=\\\&quot;\&quot; url \&quot;\\\&quot; style=\\\&quot;display:block;\\\&quot; /&gt;\&quot; article)))\n\n\n(defn- wrap-paragraph [text]\n  \&quot;包裹段落\&quot;\n  (apply str (map #(apply str (enlive/emit* ((enlive/wrap :p) %)))\n                  (str/split text #\&quot;\\n\&quot;))))\n\n(defn- patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    (doseq [article-info article-list]\n      (println {:title (:spinner_title article-info)\n                            :article (add-image-to-article (:spinner_article article-info))}))))\n\n(patch-push-article \&quot;www.ecigview.com\&quot; 1)&quot;, :offset 949, :ns &quot;ave40.push&quot;} {:command &quot;(defn- patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    (doseq [article-info article-list]\n      (push-article domain {:title (:spinner_title article-info)\n                            :article (add-image-to-article (:spinner_article article-info))}))))\n\n(patch-push-article \&quot;www.ecigview.com\&quot; 1)&quot;, :offset 626, :ns &quot;ave40.push&quot;} {:command &quot;(defn- push-article\n  \&quot;将文章推送到指定的博客\&quot;\n  [domain {:keys [title article]}]\n  (log/info (str \&quot;pushing to \&quot; domain \&quot;, article: \&quot; title))\n  (println (http/post \&quot;http://manage.ecigview.com/posts/create\&quot;\n                      {:form-params {:domain domain\n                                     :title title\n                                     :content article}})))\n\n(defn- add-image-to-article\n  \&quot;将图片加到文章中\&quot;\n  [article]\n  (let [url (:source_url (select-rand-image article-db))]\n    (str \&quot;&lt;img src=\\\&quot;\&quot; url \&quot;\\\&quot; style=\\\&quot;display:block;\\\&quot; /&gt;\&quot; article)))\n\n\n(defn- wrap-paragraph [text]\n  \&quot;包裹段落\&quot;\n  (apply str (map #(apply str (enlive/emit* ((enlive/wrap :p) %)))\n                  (str/split text #\&quot;\\n\&quot;))))\n\n(defn- patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    (doseq [article-info article-list]\n      (push-article domain {:title (:spinner_title article-info)\n                            :article (add-image-to-article (:spinner_article article-info))}))))\n\n(patch-push-article \&quot;www.ecigview.com\&quot; 1)&quot;, :offset 1317, :ns &quot;ave40.push&quot;} {:command &quot;\n(defn- push-article\n  \&quot;将文章推送到指定的博客\&quot;\n  [domain {:keys [title article]}]\n  (log/info (str \&quot;pushing to \&quot; domain \&quot;, article: \&quot; title))\n  (println (:body (http/post \&quot;http://manage.ecigview.com/posts/create\&quot;\n                             {:form-params {:domain domain\n                                            :title title\n                                            :content article}}))))\n\n(defn- add-image-to-article\n  \&quot;将图片加到文章中\&quot;\n  [article]\n  (let [url (:source_url (select-rand-image article-db))]\n    (str \&quot;&lt;img src=\\\&quot;\&quot; url \&quot;\\\&quot; style=\\\&quot;display:block;\\\&quot; /&gt;\&quot; article)))\n\n\n(defn- wrap-paragraph [text]\n  \&quot;包裹段落\&quot;\n  (apply str (map #(apply str (enlive/emit* ((enlive/wrap :p) %)))\n                  (str/split text #\&quot;\\n\&quot;))))\n\n(defn- patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    (doseq [article-info article-list]\n      (push-article domain {:title (:spinner_title article-info)\n                            :article (add-image-to-article (:spinner_article article-info))}))))\n\n(patch-push-article \&quot;www.ecigview.com\&quot; 1)&quot;, :offset 1347, :ns &quot;ave40.push&quot;} {:command &quot;(patch-push-article \&quot;www.vaping10.com\&quot; 1)&quot;, :offset 41, :ns &quot;ave40.push&quot;} {:command &quot;(ns ave40.push\n  (:require [clj-http.client :as http]\n            [ave40.db :refer :all]\n            [clojure.string :as str]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.walk :as w]\n            [clojure.tools.logging :as log]))\n\n\n\n(defn- push-article\n  \&quot;将文章推送到指定的博客\&quot;\n  [domain {:keys [title article]}]\n  (log/info (str \&quot;pushing to \&quot; domain \&quot;, article: \&quot; title))\n  (println {:domain domain\n            :title title\n            :content article})\n  #_(println (:body (http/post \&quot;http://manage.ecigview.com/posts/create\&quot;\n                             {:form-params {:domain domain\n                                            :title title\n                                            :content article}}))))\n\n(defn- add-image-to-article\n  \&quot;将图片加到文章中\&quot;\n  [article]\n  (let [url (:source_url (select-rand-image article-db))]\n    (str \&quot;&lt;img src=\\\&quot;\&quot; url \&quot;\\\&quot; style=\\\&quot;display:block;\\\&quot; /&gt;\&quot; article)))\n\n\n(defn- wrap-paragraph [text]\n  \&quot;包裹段落\&quot;\n  (apply str (map #(apply str (enlive/emit* ((enlive/wrap :p) %)))\n                  (str/split text #\&quot;\\n\&quot;))))\n\n(defn- patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    (doseq [article-info article-list]\n      (push-article domain {:title (:spinner_title article-info)\n                            :article (add-image-to-article (:spinner_article article-info))}))))\n\n(patch-push-article \&quot;www.vaping10.com\&quot; 1)&quot;, :offset 1687, :ns &quot;grapdata.core&quot;} {:command &quot;\n(defn- push-article\n  \&quot;将文章推送到指定的博客\&quot;\n  [domain {:keys [title article]}]\n  (log/info (str \&quot;pushing to \&quot; domain \&quot;, article: \&quot; title))\n  (println (:body (http/post \&quot;http://manage.ecigview.com/posts/create\&quot;\n                             {:form-params {:domain domain\n                                            :title title\n                                            :content article}}))))\n\n(defn- add-image-to-article\n  \&quot;将图片加到文章中\&quot;\n  [article]\n  (let [url (:source_url (select-rand-image article-db))]\n    (str \&quot;&lt;img src=\\\&quot;\&quot; url \&quot;\\\&quot; style=\\\&quot;display:block;\\\&quot; /&gt;\&quot; article)))\n\n\n(defn- wrap-paragraph [text]\n  \&quot;包裹段落\&quot;\n  (apply str (map #(apply str (enlive/emit* ((enlive/wrap :p) %)))\n                  (str/split text #\&quot;\\n\&quot;))))\n\n(defn- patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    (doseq [article-info article-list]\n      (push-article domain {:title (:spinner_title article-info)\n                            :article (add-image-to-article (:spinner_article article-info))}))))\n\n(patch-push-article \&quot;www.ecigblog.in\&quot; 1)&quot;, :offset 1346, :ns &quot;ave40.push&quot;} {:command &quot;(ns ave40.db\n  (:require [hugsql.core :as hugsql]))\n\n\n(def article-db\n  {:classname \&quot;com.mysql.jdbc.Driver\&quot;\n   :subprotocol \&quot;mysql\&quot;\n   :subname \&quot;//127.0.0.1/article\&quot;\n   :user \&quot;root\&quot;\n   :password \&quot;a5235013\&quot;\n   :sslmode \&quot;require\&quot;})\n\n\n(hugsql/def-db-fns \&quot;sql/article.sql\&quot; {:quoting :mysql})\n(hugsql/def-sqlvec-fns \&quot;sql/article.sql\&quot; {:quoting :mysql})\n\n(defn data-insert!\n  [table data]\n  (insert-table-data article-db {:table table :cols (keys data) :vals (vals data)}))&quot;, :offset 467, :ns &quot;grapdata.core&quot;} {:command &quot;(ns learn.article\n  (:require [clj-http.client :as http]\n            [clojure.string :as str]\n            [hugsql.core :as hugsql]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.core.async :as async]\n            [clojure.data]\n            [clojure.walk :as w]\n            [cheshire.core :as json]\n            [learn.utils :as utils]\n            [clojure.set :as s])\n  (:import (java.io StringReader)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 代理IP\n(def proxy-ip\n  [\&quot;107.172.237.205\&quot;\n   \&quot;155.94.170.116\&quot;\n   \&quot;173.44.166.162\&quot;\n   \&quot;104.247.121.136\&quot;\n   \&quot;69.12.79.156\&quot;\n   \&quot;196.19.115.190\&quot;\n   \&quot;69.12.79.185\&quot;\n   \&quot;155.94.170.26\&quot;\n   \&quot;196.19.115.69\&quot;\n   \&quot;173.44.166.8\&quot;\n   \&quot;155.94.170.252\&quot;\n   \&quot;172.245.251.251\&quot;\n   \&quot;192.210.194.142\&quot;\n   \&quot;172.245.251.222\&quot;\n   \&quot;172.245.10.55\&quot;\n   \&quot;204.44.77.225\&quot;\n   \&quot;45.59.156.136\&quot;])\n\n(defn proxy-post [url params]\n  (http/post url (merge params\n                        {:proxy-host (rand-nth proxy-ip)\n                         :proxy-port 80\n                         :proxy-user \&quot;lsegura\&quot;\n                         :proxy-pass \&quot;avenue40\&quot;})))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 数据库相关\n(def article-db\n  {:classname \&quot;com.mysql.jdbc.Driver\&quot;\n   :subprotocol \&quot;mysql\&quot;\n   :subname \&quot;//127.0.0.1/article\&quot;\n   :user \&quot;root\&quot;\n   :password \&quot;a5235013\&quot;\n   :sslmode \&quot;require\&quot;})\n\n(hugsql/def-db-fns \&quot;sql/article.sql\&quot; {:quoting :mysql})\n(hugsql/def-sqlvec-fns \&quot;sql/article.sql\&quot; {:quoting :mysql})\n\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 文章相关\n(defn- change-nodes [html]\n  (-&gt;\n    html\n    (StringReader.)\n    (enlive/html-resource)))\n\n\n(defn- wrap-paragraph [text]\n  (apply str (map #(apply str (enlive/emit* ((enlive/wrap :p) %)))\n                  (str/split text #\&quot;\\n\&quot;))))\n\n\n\n(defn- create-article-parser [html ])\n\n(defn- parse-article\n  \&quot;将HTML里面的文章提取出来\&quot;\n  [html]\n  (let [nodes (change-nodes html)\n        title-node (enlive/select nodes [:header.entry-header :h1.entry-title])\n        content-node (enlive/select nodes [:div.entry-content :&gt; :p])]\n    (when (and (not-empty title-node) (not-empty content-node))\n      {:title (-&gt; title-node\n                  first\n                  (enlive/text))\n       :article (-&gt; content-node\n                    (#(map (fn [n]\n                             (enlive/text n))\n                           %))\n                    (#(str/join \&quot;\\n\&quot; %)))})))\n\n\n(defn- push-article\n  \&quot;将文章推送到指定的博客\&quot;\n  [domain article-info]\n  (println (http/post \&quot;http://manage.ecigview.com/posts/create\&quot;\n                      {:form-params {:domain domain\n                                     :title (:title article-info)\n                                     :content (:article article-info)}})))\n\n(defn- add-image-to-post\n  [info]\n  (let [url (:source_url (select-rand-image article-db))]\n    (update info :article #(str \&quot;&lt;img src=\\\&quot;\&quot; url \&quot;\\\&quot; style=\\\&quot;display:block;\\\&quot; /&gt;\&quot; %))))\n\n(defn- push-article-to-blog\n  [domain]\n  (let [list (select-article2-limit-10 article-db)]\n    (doseq [info list]\n      (push-article domain (add-image-to-post info)))))\n\n(push-article-to-blog \&quot;www.ecigblog.in\&quot;)\n&quot;, :offset 3005, :ns &quot;grapdata.core&quot;} {:command &quot;(defn- patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;article\&quot;]\n                                  :where (str \&quot;not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    (doseq [article-info article-list]\n      (push-article domain {:title (:spinner_title article-info)\n                            :article (add-image-to-article (:article article-info))}))))\n\n(patch-push-article \&quot;www.ecigblog.in\&quot; 1)&quot;, :offset 609, :ns &quot;ave40.push&quot;} {:command &quot;(defn- patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    (doseq [article-info article-list]\n      (push-article domain {:title \&quot;tttt\&quot;\n                            :article (add-image-to-article (:spinner_article article-info))}))))\n\n(patch-push-article \&quot;www.ecigblog.in\&quot; 1)&quot;, :offset 602, :ns &quot;ave40.push&quot;} {:command &quot;(defn- patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    (doseq [article-info article-list]\n      (push-article domain {:title (:spinner_title article-info)\n                            :article (add-image-to-article (:spinner_article article-info))}))))\n\n(patch-push-article \&quot;www.ecigblog.in\&quot; 1)&quot;, :offset 625, :ns &quot;ave40.push&quot;} {:command &quot;(ns ave40.spinner\n  (:require [clj-http.client :as http]\n            [clojure.string :as str]\n            [clojure.tools.logging :as log]\n            [ave40.db :refer :all]))&quot;, :offset 174, :ns &quot;grapdata.core&quot;} {:command &quot;(str/split \&quot;111\\ndff\\n\\n55555\&quot; #\&quot;\\n\&quot;)&quot;, :offset 37, :ns &quot;ave40.spinner&quot;} {:command &quot;(defn- split-content-len [content maxlen]\n  (reduce (fn [v sen]\n            (let [last-sen (last v)\n                  add-sen (str last-sen sen)]\n              (if (&lt; (count add-sen) maxlen) (conj (vec (drop-last v)) add-sen) (conj v sen))))\n          []\n          (str/split content #\&quot;\\n\&quot;)))\n\n(split-content-len \&quot;111\\ndff\\n\\n55555\&quot; 10)&quot;, :offset 336, :ns &quot;ave40.spinner&quot;} {:command &quot;(defn- split-content-len [content maxlen]\n  (reduce (fn [v sen]\n            (let [last-sen (last v)\n                  add-sen (str last-sen \&quot;\\n\&quot; sen)]\n              (if (&lt; (count add-sen) maxlen) (conj (vec (drop-last v)) add-sen) (conj v sen))))\n          []\n          (str/split content #\&quot;\\n\&quot;)))\n\n(split-content-len \&quot;111\\ndff\\n\\n55555\&quot; 10)&quot;, :offset 341, :ns &quot;ave40.spinner&quot;} {:command &quot;(ns ave40.spinner\n  (:require [clj-http.client :as http]\n            [clojure.string :as str]\n            [clojure.tools.logging :as log]\n            [ave40.db :refer :all]))\n\n(defn- split-content-len [content maxlen]\n  (reduce (fn [v sen]\n            (let [last-sen (last v)\n                  add-sen (str last-sen \&quot;\\n\&quot; sen)]\n              (if (&lt; (count add-sen) maxlen) (conj (vec (drop-last v)) add-sen) (conj v sen))))\n          []\n          (str/split content #\&quot;\\n\&quot;)))\n\n\n(defn- spinner-login []\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params {:action \&quot;authenticate\&quot;\n                                           :format \&quot;xml\&quot;\n                                           :username \&quot;515462418@qq.com\&quot;\n                                           :password \&quot;40U30600U0034383W\&quot;}})\n                 :body)\n        session (re-find #\&quot;&lt;session&gt;([\\S\\s]*?)&lt;/session&gt;\&quot; resp)]\n    (if session (second session) (throw (Exception. \&quot;session is null\&quot;)))))\n\n\n(defn- spinner-post [params]\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params params})\n                 :body)\n        output (re-find #\&quot;&lt;output&gt;([\\S\\s]*?)&lt;/output&gt;\&quot; resp)]\n    (if output (second output) (throw (Exception. (str \&quot;error:\&quot; resp))))))\n\n(defn- spinner-synonyms [text session]\n  (spinner-post {:action \&quot;identifySynonyms\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-sentences [text session]\n  (spinner-post {:action \&quot;rewriteSentences\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-randomSpin [text session]\n  (spinner-post {:action \&quot;randomSpin\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-parse [session text]\n  (try\n    (-&gt;\n      text\n      (spinner-synonyms session)\n      (spinner-randomSpin session)\n      (spinner-sentences session)\n      (spinner-randomSpin session))\n    (catch Exception e\n      (log/error e))))\n\n(defn create-spinner []\n  (let [session (spinner-login)]\n    (partial spinner-parse session)))\n\n(let [ss (create-spinner)]\n  (ss \&quot;Vandy Vape Pulse BF Squonk Mod introDo you love to squonk?\\n\\nVandy Vape Pulse BF Squonk Mod Specs and featuresSpecs\&quot;))\n&quot;, :offset 2341, :ns &quot;grapdata.core&quot;} {:command &quot;(ns grapdata.core\n  (:require [ave40.spinner :as sp])\n  (:gen-class))\n\n(defn -main\n  \&quot;I don't do a whole lot ... yet.\&quot;\n  [&amp; args]\n  (sp/muti-run-spinner 5))\n\n&quot;, :offset 158, :ns &quot;grapdata.core&quot;} {:command &quot;(-main)&quot;, :offset 7, :ns &quot;grapdata.core&quot;} {:command &quot;(muti-run-spinner 10)&quot;, :offset 21, :ns &quot;ave40.spinner&quot;} {:command &quot;(ns ave40.spinner\n  (:require [clj-http.client :as http]\n            [clojure.string :as str]\n            [clojure.tools.logging :as log]\n            [ave40.db :refer :all]))\n\n(defn- split-content-len [content maxlen]\n  (reduce (fn [v sen]\n            (let [last-sen (last v)\n                  add-sen (str last-sen \&quot;\\n\&quot; sen)]\n              (if (&lt; (count add-sen) maxlen) (conj (vec (drop-last v)) add-sen) (conj v sen))))\n          []\n          (str/split content #\&quot;\\n\&quot;)))\n\n\n(defn- spinner-login []\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params {:action \&quot;authenticate\&quot;\n                                           :format \&quot;xml\&quot;\n                                           :username \&quot;515462418@qq.com\&quot;\n                                           :password \&quot;40U30600U0034383W\&quot;}})\n                 :body)\n        session (re-find #\&quot;&lt;session&gt;([\\S\\s]*?)&lt;/session&gt;\&quot; resp)]\n    (if session (second session) (throw (Exception. \&quot;session is null\&quot;)))))\n\n\n(defn- spinner-post [params]\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params params})\n                 :body)\n        output (re-find #\&quot;&lt;output&gt;([\\S\\s]*?)&lt;/output&gt;\&quot; resp)]\n    (if output (second output) (throw (Exception. (str \&quot;error:\&quot; resp))))))\n\n(defn- spinner-synonyms [text session]\n  (spinner-post {:action \&quot;identifySynonyms\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-sentences [text session]\n  (spinner-post {:action \&quot;rewriteSentences\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-randomSpin [text session]\n  (spinner-post {:action \&quot;randomSpin\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-parse [session text]\n  (try\n    (-&gt;\n      text\n      (spinner-synonyms session)\n      (spinner-randomSpin session)\n      (spinner-sentences session)\n      (spinner-randomSpin session))\n    (catch Exception e\n      (log/error e))))\n\n(defn create-spinner []\n  (let [session (spinner-login)]\n    (partial spinner-parse session)))\n\n(defn- handle-and-save [article spinner]\n  (let [title (spinner (:title article))\n        pies (str/split (:article article) #\&quot;\\n\&quot;)\n        content (str/join \&quot;\\n\&quot; (for [p pies] (if p (spinner p))))]\n    (println (:title article))\n    (update-data\n      article-db\n      {:table \&quot;articles\&quot;\n       :updates {:spinner_title title :spinner_article content}\n       :where (str \&quot;id=\&quot; (:id article))})))\n\n(defn- handle-list-and-save [list spinner]\n  (doseq [info list]\n    (handle-and-save info spinner)))\n\n(defn muti-run-spinner [n]\n  (let [articles (select-all article-db {:table \&quot;articles\&quot; :where \&quot;isnull(spinner_article)\&quot;})\n        pies (partition (quot (count articles) n) articles)\n        spinner (create-spinner)]\n    #_(doseq [pie pies]\n      (future (handle-list-and-save pie spinner)))))\n\n(defn simple-run-spinner []\n  (let [articles (select-all article-db {:table \&quot;articles\&quot; :where \&quot;isnull(spinner_article)\&quot;})\n        spinner (create-spinner)]\n    (doseq [article articles]\n      (let [title (spinner (:title article))\n            pies (str/split (:article article) #\&quot;\\n\&quot;)\n            content (str/join \&quot;\\n\&quot; (for [p pies] (if p (spinner p))))]\n        (println (:title article))\n        (update-data\n          article-db\n          {:table \&quot;articles\&quot;\n           :updates {:spinner_title title :spinner_article content}\n           :where (str \&quot;id=\&quot; (:id article))})))))\n\n(muti-run-spinner 10)&quot;, :offset 3582, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.spinner\n  (:require [clj-http.client :as http]\n            [clojure.string :as str]\n            [clojure.tools.logging :as log]\n            [ave40.db :refer :all]))\n\n(defn- split-content-len [content maxlen]\n  (reduce (fn [v sen]\n            (let [last-sen (last v)\n                  add-sen (str last-sen \&quot;\\n\&quot; sen)]\n              (if (&lt; (count add-sen) maxlen) (conj (vec (drop-last v)) add-sen) (conj v sen))))\n          []\n          (str/split content #\&quot;\\n\&quot;)))\n\n\n(defn- spinner-login []\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params {:action \&quot;authenticate\&quot;\n                                           :format \&quot;xml\&quot;\n                                           :username \&quot;515462418@qq.com\&quot;\n                                           :password \&quot;40U30600U0034383W\&quot;}})\n                 :body)\n        session (re-find #\&quot;&lt;session&gt;([\\S\\s]*?)&lt;/session&gt;\&quot; resp)]\n    (if session (second session) (throw (Exception. \&quot;session is null\&quot;)))))\n\n\n(defn- spinner-post [params]\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params params})\n                 :body)\n        output (re-find #\&quot;&lt;output&gt;([\\S\\s]*?)&lt;/output&gt;\&quot; resp)]\n    (if output (second output) (throw (Exception. (str \&quot;error:\&quot; resp))))))\n\n(defn- spinner-synonyms [text session]\n  (spinner-post {:action \&quot;identifySynonyms\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-sentences [text session]\n  (spinner-post {:action \&quot;rewriteSentences\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-randomSpin [text session]\n  (spinner-post {:action \&quot;randomSpin\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-parse [session text]\n  (try\n    (-&gt;\n      text\n      (spinner-synonyms session)\n      (spinner-randomSpin session)\n      (spinner-sentences session)\n      (spinner-randomSpin session))\n    (catch Exception e\n      (log/error e))))\n\n(defn create-spinner []\n  (let [session (spinner-login)]\n    (partial spinner-parse session)))\n\n(defn- handle-and-save [article spinner]\n  (let [title (spinner (:title article))\n        pies (str/split (:article article) #\&quot;\\n\&quot;)\n        content (str/join \&quot;\\n\&quot; (for [p pies] (if p (spinner p))))]\n    (println (:title article))\n    (update-data\n      article-db\n      {:table \&quot;articles\&quot;\n       :updates {:spinner_title title :spinner_article content}\n       :where (str \&quot;id=\&quot; (:id article))})))\n\n(defn- handle-list-and-save [list spinner]\n  (doseq [info list]\n    (handle-and-save info spinner)))\n\n(defn muti-run-spinner [n]\n  (let [articles (select-all article-db {:table \&quot;articles\&quot; :where \&quot;isnull(spinner_article)\&quot;})\n        pies (partition (quot (count articles) n) articles)\n        spinner (create-spinner)]\n    (doseq [pie pies]\n      (future (handle-list-and-save pie spinner)))))\n\n(defn simple-run-spinner []\n  (let [articles (select-all article-db {:table \&quot;articles\&quot; :where \&quot;isnull(spinner_article)\&quot;})\n        spinner (create-spinner)]\n    (doseq [article articles]\n      (let [title (spinner (:title article))\n            pies (str/split (:article article) #\&quot;\\n\&quot;)\n            content (str/join \&quot;\\n\&quot; (for [p pies] (if p (spinner p))))]\n        (println (:title article))\n        (update-data\n          article-db\n          {:table \&quot;articles\&quot;\n           :updates {:spinner_title title :spinner_article content}\n           :where (str \&quot;id=\&quot; (:id article))})))))\n\n(muti-run-spinner 1)&quot;, :offset 3579, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.spinner\n  (:require [clj-http.client :as http]\n            [clojure.string :as str]\n            [clojure.tools.logging :as log]\n            [ave40.db :refer :all]))\n\n(defn- split-content-len [content maxlen]\n  (reduce (fn [v sen]\n            (let [last-sen (last v)\n                  add-sen (str last-sen \&quot;\\n\&quot; sen)]\n              (if (&lt; (count add-sen) maxlen) (conj (vec (drop-last v)) add-sen) (conj v sen))))\n          []\n          (str/split content #\&quot;\\n\&quot;)))\n\n\n(defn- spinner-login []\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params {:action \&quot;authenticate\&quot;\n                                           :format \&quot;xml\&quot;\n                                           :username \&quot;515462418@qq.com\&quot;\n                                           :password \&quot;40U30600U0034383W\&quot;}})\n                 :body)\n        session (re-find #\&quot;&lt;session&gt;([\\S\\s]*?)&lt;/session&gt;\&quot; resp)]\n    (if session (second session) (throw (Exception. \&quot;session is null\&quot;)))))\n\n\n(defn- spinner-post [params]\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params params})\n                 :body)\n        output (re-find #\&quot;&lt;output&gt;([\\S\\s]*?)&lt;/output&gt;\&quot; resp)]\n    (if output (second output) (throw (Exception. (str \&quot;error:\&quot; resp))))))\n\n(defn- spinner-synonyms [text session]\n  (spinner-post {:action \&quot;identifySynonyms\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-sentences [text session]\n  (spinner-post {:action \&quot;rewriteSentences\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-randomSpin [text session]\n  (spinner-post {:action \&quot;randomSpin\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-parse [session text]\n  (try\n    (-&gt;\n      text\n      (spinner-synonyms session)\n      (spinner-randomSpin session)\n      (spinner-sentences session)\n      (spinner-randomSpin session))\n    (catch Exception e\n      (log/error e))))\n\n(defn create-spinner []\n  (let [session (spinner-login)]\n    (partial spinner-parse session)))\n\n(defn- handle-and-save [article spinner]\n  (let [title (spinner (:title article))\n        pies (str/split (:article article) #\&quot;\\n\&quot;)\n        content (str/join \&quot;\\n\&quot; (for [p pies] (if p (spinner p))))]\n    (println (:title article))\n    (update-data\n      article-db\n      {:table \&quot;articles\&quot;\n       :updates {:spinner_title title :spinner_article content}\n       :where (str \&quot;id=\&quot; (:id article))})))\n\n(defn- handle-list-and-save [list spinner]\n  (doseq [info list]\n    (handle-and-save info spinner)))\n\n(defn muti-run-spinner [n]\n  (let [articles (select-all article-db {:table \&quot;articles\&quot; :where \&quot;isnull(spinner_article)\&quot;})\n        pies (partition (quot (count articles) n) articles)\n        spinner (create-spinner)]\n    (doseq [pie pies]\n      (future (handle-list-and-save pie spinner)))))\n\n(defn simple-run-spinner []\n  (let [articles (select-all article-db {:table \&quot;articles\&quot; :where \&quot;isnull(spinner_article)\&quot;})\n        spinner (create-spinner)]\n    (doseq [article articles]\n      (let [title (spinner (:title article))\n            pies (str/split (:article article) #\&quot;\\n\&quot;)\n            content (str/join \&quot;\\n\&quot; (for [p pies] (if p (spinner p))))]\n        (println (:title article))\n        (update-data\n          article-db\n          {:table \&quot;articles\&quot;\n           :updates {:spinner_title title :spinner_article content}\n           :where (str \&quot;id=\&quot; (:id article))})))))\n\n(simple-run-spinner)&quot;, :offset 3579, :ns &quot;grapdata.core&quot;} {:command &quot;(ns ave40.spinner\n  (:require [clj-http.client :as http]\n            [clojure.string :as str]\n            [clojure.tools.logging :as log]\n            [ave40.db :refer :all]))\n\n(defn- split-content-len [content maxlen]\n  (reduce (fn [v sen]\n            (let [last-sen (last v)\n                  add-sen (str last-sen \&quot;\\n\&quot; sen)]\n              (if (&lt; (count add-sen) maxlen) (conj (vec (drop-last v)) add-sen) (conj v sen))))\n          []\n          (str/split content #\&quot;\\n\&quot;)))\n\n\n(defn- spinner-login []\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params {:action \&quot;authenticate\&quot;\n                                           :format \&quot;xml\&quot;\n                                           :username \&quot;515462418@qq.com\&quot;\n                                           :password \&quot;40U30600U0034383W\&quot;}})\n                 :body)\n        session (re-find #\&quot;&lt;session&gt;([\\S\\s]*?)&lt;/session&gt;\&quot; resp)]\n    (if session (second session) (throw (Exception. \&quot;session is null\&quot;)))))\n\n\n(defn- spinner-post [params]\n  (let [resp (-&gt; (http/post \&quot;http://thebestspinner.com/api.php\&quot;\n                            {:form-params params})\n                 :body)\n        output (re-find #\&quot;&lt;output&gt;([\\S\\s]*?)&lt;/output&gt;\&quot; resp)]\n    (if output (second output) (throw (Exception. (str \&quot;error:\&quot; resp))))))\n\n(defn- spinner-synonyms [text session]\n  (spinner-post {:action \&quot;identifySynonyms\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-sentences [text session]\n  (spinner-post {:action \&quot;rewriteSentences\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-randomSpin [text session]\n  (spinner-post {:action \&quot;randomSpin\&quot;\n                 :session session\n                 :format \&quot;xml\&quot;\n                 :text text}))\n\n(defn- spinner-parse [session text]\n  (try\n    (-&gt;\n      text\n      (spinner-synonyms session)\n      (spinner-randomSpin session)\n      (spinner-sentences session)\n      (spinner-randomSpin session))\n    (catch Exception e\n      (log/error e))))\n\n(defn create-spinner []\n  (let [session (spinner-login)]\n    (partial spinner-parse session)))\n\n(defn- handle-and-save [article spinner]\n  (let [title (spinner (:title article))\n        pies (str/split (:article article) #\&quot;\\n\&quot;)\n        content (str/join \&quot;\\n\&quot; (for [p pies] (if p (spinner p))))]\n    (println (:title article))\n    (update-data\n      article-db\n      {:table \&quot;articles\&quot;\n       :updates {:spinner_title title :spinner_article content}\n       :where (str \&quot;id=\&quot; (:id article))})))\n\n(defn- handle-list-and-save [list spinner]\n  (doseq [info list]\n    (handle-and-save info spinner)))\n\n(defn muti-run-spinner [n]\n  (let [articles (select-all article-db {:table \&quot;articles\&quot; :where \&quot;isnull(spinner_article)\&quot;})\n        pies (partition (quot (count articles) n) articles)\n        spinner (create-spinner)]\n    (doseq [pie pies]\n      (future (handle-list-and-save pie spinner)))))\n\n(defn simple-run-spinner []\n  (let [articles (select-all article-db {:table \&quot;articles\&quot; :where \&quot;isnull(spinner_article)\&quot;})\n        spinner (create-spinner)]\n    (doseq [article articles]\n      (let [title (spinner (:title article))\n            pies (str/split (:article article) #\&quot;\\n\&quot;)\n            content (str/join \&quot;\\n\&quot; (for [p pies] (if p (spinner p))))]\n        (println (:title article))\n        (update-data\n          article-db\n          {:table \&quot;articles\&quot;\n           :updates {:spinner_title title :spinner_article content}\n           :where (str \&quot;id=\&quot; (:id article))})))))\n&quot;, :offset 3558, :ns &quot;grapdata.core&quot;} {:command &quot;(str/join \&quot;\\n\&quot; [nil 1 2 nil 4])&quot;, :offset 31, :ns &quot;ave40.spinner&quot;} {:command &quot;(for [p [1 nil 2 3]] (if p p))&quot;, :offset 30, :ns &quot;ave40.spinner&quot;} {:command &quot;(for [p [1 nil 2 3]] (if p (+ p 1)))&quot;, :offset 36, :ns &quot;ave40.spinner&quot;} {:command &quot;(let [article {:title \&quot;111\&quot; :article \&quot;555\\n345345\\n45555\\n\&quot;}\n      spinner #(str \&quot;xxx\&quot; %)\n      title (spinner (:title article))\n      pies (str/split (:article article) #\&quot;\\n\&quot;)\n      content (str/join \&quot;\\n\&quot; (for [p pies] (if p (spinner p))))]\n  (println title)\n  (println content))&quot;, :offset 280, :ns &quot;ave40.spinner&quot;} {:command &quot;(let [article {:title \&quot;111\&quot; :article \&quot;555\\n345345\\n45555\\n\&quot;}\n      spinner #(str \&quot;xxx\&quot; %)\n      title (spinner (:title article))\n      pies (str/split (:article article) #\&quot;\\n\&quot;)\n      content (str/join \&quot;\\n\&quot; (for [p pies] (if p (spinner p))))]\n  (println content))&quot;, :offset 262, :ns &quot;ave40.spinner&quot;} {:command &quot;(let [article {:title \&quot;111\&quot; :article \&quot;555\\n345345\\n45555\\n\&quot;}\n      spinner (create-spinner)\n      title (spinner (:title article))\n      pies (str/split (:article article) #\&quot;\\n\&quot;)\n      content (str/join \&quot;\\n\&quot; (for [p pies] (if p (spinner p))))]\n  (println content))&quot;, :offset 264, :ns &quot;ave40.spinner&quot;} {:command &quot;(let [article (get-by-id article-db {:table \&quot;articles\&quot; :id 5})\n      spinner (create-spinner)\n      title (spinner (:title article))\n      pies (str/split (:article article) #\&quot;\\n\&quot;)\n      content (str/join \&quot;\\n\&quot; (for [p pies] (if p (spinner p))))]\n  (println content))&quot;, :offset 266, :ns &quot;ave40.spinner&quot;} {:command &quot;(let [articles (select-all article-db {:table \&quot;articles\&quot; :where \&quot;isnull(spinner_article)\&quot;})]\n  (count articles))&quot;, :offset 112, :ns &quot;ave40.spinner&quot;} {:command &quot;(ns ave40.push\n  (:require [clj-http.client :as http]\n            [ave40.db :refer :all]\n            [clojure.string :as str]\n            [net.cgrand.enlive-html :as enlive]\n            [clojure.walk :as w]\n            [clojure.tools.logging :as log]))\n\n\n\n(defn- push-article\n  \&quot;将文章推送到指定的博客\&quot;\n  [domain {:keys [title article]}]\n  (log/info (str \&quot;pushing to \&quot; domain \&quot;, article: \&quot; title))\n  (println (:body (http/post \&quot;http://manage.ecigview.com/posts/create\&quot;\n                             {:form-params {:domain domain\n                                            :title title\n                                            :content article}}))))\n\n(defn- add-image-to-article\n  \&quot;将图片加到文章中\&quot;\n  [article]\n  (let [url (:source_url (select-rand-image article-db))]\n    (str \&quot;&lt;img src=\\\&quot;\&quot; url \&quot;\\\&quot; style=\\\&quot;display:block;\\\&quot; /&gt;\&quot; article)))\n\n\n(defn- wrap-paragraph [text]\n  \&quot;包裹段落\&quot;\n  (apply str (map #(apply str (enlive/emit* ((enlive/wrap :p) %)))\n                  (str/split text #\&quot;\\n\&quot;))))\n\n(defn patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    (doseq [article-info article-list]\n      (push-article domain {:title (:spinner_title article-info)\n                            :article (add-image-to-article (:spinner_article article-info))})\n      (update-data article-db {:table \&quot;articles\&quot;\n                               :updates {:post_time (quot (System/currentTimeMillis) 1000)\n                                         :post_domain domain}\n                               :where (str \&quot;id=\&quot; (:id article-info))}))))\n\n(patch-push-article \&quot;www.vapinggift.com\&quot; 1)\n&quot;, :offset 1877, :ns &quot;grapdata.core&quot;} {:command &quot;(def domains [\&quot;www.vapinggift.com\&quot;])\n\n(defn do-push []\n  (doseq [domain domains]\n    (patch-push-article domain 10)))\n\n(do-push)\n&quot;, :offset 129, :ns &quot;ave40.push&quot;} {:command &quot;(defn patch-push-article\n  \&quot;批量推送文章到博客\&quot;\n  [domain amount]\n  (let [article-list (select-all article-db\n                                 {:table \&quot;articles\&quot;\n                                  :cols [\&quot;id\&quot; \&quot;spinner_title\&quot; \&quot;spinner_article\&quot;]\n                                  :where (str \&quot;ISNULL(post_domain) and not isnull(spinner_title) and not isnull(spinner_article) and spinner_article&lt;&gt;'' limit \&quot; amount)})]\n    (doseq [article-info article-list]\n      (push-article domain {:title (:spinner_title article-info)\n                            :article (add-image-to-article (:spinner_article article-info))})\n      (update-data article-db {:table \&quot;articles\&quot;\n                               :updates {:post_time (quot (System/currentTimeMillis) 1000)\n                                         :post_domain domain}\n                               :where (str \&quot;id=\&quot; (:id article-info))}))))\n\n[\&quot;www.vapinggift.com\&quot;\n \&quot;www.eciggadget.com\&quot;\n \&quot;www.ecigsmok.com\&quot;\n \&quot;www.vapingblog.net\&quot;\n \&quot;www.eciggod.com\&quot;\n \&quot;www.vapingpromo.com\&quot;\n \&quot;www.ecigcommunity.com\&quot;\n \&quot;www.ecigblog.in\&quot;\n \&quot;www.vapingblog.in\&quot;\n \&quot;www.vaping10.com\&quot;\n \&quot;www.vapinggift.com\&quot;]\n\n(def domains [\&quot;www.eciggadget.com\&quot;])\n\n(defn do-push []\n  (doseq [domain domains]\n    (patch-push-article domain 10)))\n\n(do-push)\n&quot;, :offset 1247, :ns &quot;ave40.push&quot;} {:command &quot;(def domains [\&quot;www.ecigsmok.com\&quot;\n              \&quot;www.vapingblog.net\&quot;\n              \&quot;www.eciggod.com\&quot;\n              \&quot;www.vapingpromo.com\&quot;\n              \&quot;www.ecigcommunity.com\&quot;\n              \&quot;www.ecigblog.in\&quot;\n              \&quot;www.vapingblog.in\&quot;\n              \&quot;www.vaping10.com\&quot;\n              \&quot;www.vapinggift.com\&quot;])\n\n(defn do-push []\n  (doseq [domain domains]\n    (patch-push-article domain 10)))\n\n(do-push)\n&quot;, :offset 402, :ns &quot;ave40.push&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.repl">
    <configuration default="true" type="Applet" factoryName="Applet">
      <option name="HTML_USED" value="false" />
      <option name="WIDTH" value="400" />
      <option name="HEIGHT" value="300" />
      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
      <module />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="TEST_OBJECT" value="class" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <envs />
      <patterns />
    </configuration>
    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType" factoryName="Plugin">
      <module name="" />
      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
      <option name="PROGRAM_PARAMETERS" />
      <predefined_log_file id="idea.log" enabled="true" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="TestNG" factoryName="TestNG">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="SUITE_NAME" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="GROUP_NAME" />
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <option name="OUTPUT_DIRECTORY" />
      <option name="ANNOTATION_TYPE" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <option name="USE_DEFAULT_REPORTERS" value="false" />
      <option name="PROPERTIES_FILE" />
      <envs />
      <properties />
      <listeners />
    </configuration>
    <configuration name="newdriver" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="grapdata" />
      <setting name="path" value="$PROJECT_DIR$/src/learn/newdriver.clj" />
      <setting name="namespace" value="" />
      <setting name="useLein" value="false" />
      <setting name="profiles" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/learn" />
    </configuration>
    <configuration name="repl" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="grapdata" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
    </configuration>
    <list size="2">
      <item index="0" class="java.lang.String" itemvalue="Clojure REPL.repl" />
      <item index="1" class="java.lang.String" itemvalue="Clojure Application.newdriver" />
    </list>
    <recent_temporary>
      <list size="1">
        <item index="0" class="java.lang.String" itemvalue="Clojure Application.newdriver" />
      </list>
    </recent_temporary>
  </component>
  <component name="ShelveChangesManager" show_recycled="false">
    <option name="remove_strategy" value="false" />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="842f1f30-5306-42cb-bbaf-cb86e780eb0d" name="Default" comment="" />
      <created>1502356526041</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1502356526041</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="-8" y="-8" width="1936" height="1056" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info id="Palette" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="DB Execution Console" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32934782" sideWeight="0.5" order="7" side_tool="true" content_ui="tabs" />
      <window_info id="Maven Projects" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32995737" sideWeight="0.4869565" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="REPL" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.2857143" sideWeight="0.5173913" order="3" side_tool="true" content_ui="tabs" />
      <window_info id="Leiningen" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32995737" sideWeight="0.45217392" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Tool" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="MaxCompute Job" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="MaxCompute Job Explorer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.4826087" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="UI Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="MaxCompute Project Explorer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="DB Browser" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Palette&#9;" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Image Layers" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Analysis" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32934782" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32934782" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.19349681" sideWeight="0.5" order="0" side_tool="false" content_ui="combo" />
      <window_info id="MaxCompute Console" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Theme Preview" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="true" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32934782" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
    </layout>
    <layout-to-restore>
      <window_info id="Palette" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="DB Execution Console" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32934782" sideWeight="0.5" order="8" side_tool="true" content_ui="tabs" />
      <window_info id="Maven Projects" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32995737" sideWeight="0.4869565" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="REPL" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.3859275" sideWeight="0.5173913" order="5" side_tool="true" content_ui="tabs" />
      <window_info id="Leiningen" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32995737" sideWeight="0.45217392" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Tool" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="MaxCompute Job" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="MaxCompute Job Explorer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.4826087" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="UI Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="MaxCompute Project Explorer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="DB Browser" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Palette&#9;" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Image Layers" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Analysis" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32934782" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="10" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32934782" sideWeight="0.5" order="11" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.18710022" sideWeight="0.5" order="0" side_tool="false" content_ui="combo" />
      <window_info id="MaxCompute Console" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="12" side_tool="false" content_ui="tabs" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32934782" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Theme Preview" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="true" content_ui="tabs" />
    </layout-to-restore>
  </component>
  <component name="UnknownFeatures">
    <option featureType="com.intellij.fileTypeFactory" implementationName="*.log" />
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints-dialog>
        <breakpoints-dialog />
      </breakpoints-dialog>
      <option name="time" value="17" />
    </breakpoint-manager>
    <watches-manager />
  </component>
  <component name="antWorkspaceConfiguration">
    <option name="IS_AUTOSCROLL_TO_SOURCE" value="false" />
    <option name="FILTER_TARGETS" value="false" />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/resources/sql/wordpress.sql" />
    <entry file="file://$PROJECT_DIR$/src/learn/wordpress.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/clj-webdriver/clj-webdriver/0.7.1/clj-webdriver-0.7.1.jar!/clj_webdriver/driver.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="413">
          <caret line="25" column="39" lean-forward="false" selection-start-line="25" selection-start-column="39" selection-end-line="25" selection-end-column="39" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/seleniumhq/selenium/selenium-firefox-driver/2.45.0/selenium-firefox-driver-2.45.0.jar!/org/openqa/selenium/firefox/FirefoxProfile.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="28">
          <caret line="132" column="86" lean-forward="false" selection-start-line="132" selection-start-column="86" selection-end-line="132" selection-end-column="86" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/seleniumhq/selenium/selenium-api/2.44.0/selenium-api-2.44.0.jar!/org/openqa/selenium/remote/DesiredCapabilities.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="162">
          <caret line="22" column="11" lean-forward="false" selection-start-line="22" selection-start-column="11" selection-end-line="22" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/clj-http/clj-http/3.7.0/clj-http-3.7.0.jar!/clj_http/client.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="298">
          <caret line="1194" column="6" lean-forward="false" selection-start-line="1194" selection-start-column="6" selection-end-line="1194" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/dbconfig.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="162">
          <caret line="9" column="0" lean-forward="true" selection-start-line="9" selection-start-column="0" selection-end-line="9" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/grap_records.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/datawarehouse/coutchdetail.clj" />
    <entry file="file://$PROJECT_DIR$/src/datawarehouse/mongodetail.clj" />
    <entry file="file://$PROJECT_DIR$/src/datawarehouse/dbsqldetail.clj" />
    <entry file="file://$PROJECT_DIR$/src/grapdata/common.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/clutch.clj" />
    <entry file="file://$PROJECT_DIR$/src/learn/email.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="558">
          <caret line="31" column="0" lean-forward="true" selection-start-line="31" selection-start-column="0" selection-end-line="31" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/facebook.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="468">
          <caret line="26" column="0" lean-forward="false" selection-start-line="26" selection-start-column="0" selection-end-line="26" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/learndriverweb.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="34" column="0" lean-forward="false" selection-start-line="34" selection-start-column="0" selection-end-line="34" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/learnmongo.clj" />
    <entry file="file://$PROJECT_DIR$/src/learn/learntimbre.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/twitter.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="342">
          <caret line="19" column="22" lean-forward="false" selection-start-line="19" selection-start-column="22" selection-end-line="19" selection-end-column="22" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/newdriver.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="162">
          <caret line="63" column="55" lean-forward="true" selection-start-line="63" selection-start-column="55" selection-end-line="63" selection-end-column="55" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/grap_executor.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="396">
          <caret line="22" column="31" lean-forward="false" selection-start-line="22" selection-start-column="31" selection-end-line="22" selection-end-column="31" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/grap_protocols.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="72">
          <caret line="4" column="8" lean-forward="true" selection-start-line="4" selection-start-column="8" selection-end-line="4" selection-end-column="8" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/task/common_task.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="397">
          <caret line="58" column="2" lean-forward="false" selection-start-line="58" selection-start-column="2" selection-end-line="58" selection-end-column="2" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/name.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="522">
          <caret line="104" column="26" lean-forward="false" selection-start-line="104" selection-start-column="26" selection-end-line="104" selection-end-column="26" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/cps.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="288">
          <caret line="16" column="13" lean-forward="true" selection-start-line="16" selection-start-column="13" selection-end-line="16" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.8.0/clojure-1.8.0.jar!/clojure/walk.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="298">
          <caret line="100" column="6" lean-forward="false" selection-start-line="100" selection-start-column="6" selection-end-line="100" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/phonecode.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="429">
          <caret line="37" column="30" lean-forward="true" selection-start-line="37" selection-start-column="30" selection-end-line="37" selection-end-column="30" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/enlive/enlive/1.1.6/enlive-1.1.6.jar!/net/cgrand/enlive_html.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="525">
          <caret line="1006" column="49" lean-forward="false" selection-start-line="1006" selection-start-column="34" selection-end-line="1006" selection-end-column="49" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tools/phantom_graper.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="504">
          <caret line="28" column="22" lean-forward="true" selection-start-line="28" selection-start-column="22" selection-end-line="28" selection-end-column="22" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/resources/sql/users.sql">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="252">
          <caret line="32" column="0" lean-forward="false" selection-start-line="32" selection-start-column="0" selection-end-line="43" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/db.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="288">
          <caret line="16" column="12" lean-forward="true" selection-start-line="16" selection-start-column="12" selection-end-line="16" selection-end-column="12" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.8.0/clojure-1.8.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="244">
          <caret line="1739" column="27" lean-forward="false" selection-start-line="1739" selection-start-column="27" selection-end-line="1739" selection-end-column="27" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/resources/sql/image.sql">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/main.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="588">
          <caret line="207" column="31" lean-forward="false" selection-start-line="207" selection-start-column="31" selection-end-line="207" selection-end-column="31" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/grap_engine.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="72">
          <caret line="4" column="40" lean-forward="true" selection-start-line="4" selection-start-column="40" selection-end-line="4" selection-end-column="40" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/com/layerware/hugsql-core/0.4.7/hugsql-core-0.4.7.jar!/hugsql/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="190">
          <caret line="514" column="20" lean-forward="true" selection-start-line="514" selection-start-column="20" selection-end-line="514" selection-end-column="20" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/log4j.properties">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="162">
          <caret line="9" column="59" lean-forward="true" selection-start-line="9" selection-start-column="59" selection-end-line="9" selection-end-column="59" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/utils.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="306">
          <caret line="17" column="34" lean-forward="true" selection-start-line="17" selection-start-column="34" selection-end-line="17" selection-end-column="34" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/tools.logging/0.4.0/tools.logging-0.4.0.jar!/clojure/tools/logging.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="550">
          <caret line="96" column="14" lean-forward="true" selection-start-line="96" selection-start-column="14" selection-end-line="96" selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="576">
          <caret line="32" column="0" lean-forward="true" selection-start-line="32" selection-start-column="0" selection-end-line="32" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/ave40/grap_image.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="450">
          <caret line="25" column="0" lean-forward="true" selection-start-line="25" selection-start-column="0" selection-end-line="25" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/ave40/utils.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="54">
          <caret line="3" column="41" lean-forward="true" selection-start-line="3" selection-start-column="41" selection-end-line="3" selection-end-column="41" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/ave40/manager.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="306">
          <caret line="17" column="0" lean-forward="true" selection-start-line="17" selection-start-column="0" selection-end-line="17" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/ave40/article.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="264">
          <caret line="25" column="44" lean-forward="true" selection-start-line="25" selection-start-column="44" selection-end-line="25" selection-end-column="44" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/ave40/db.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="288">
          <caret line="16" column="18" lean-forward="false" selection-start-line="16" selection-start-column="18" selection-end-line="16" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/resources/sql/article.sql">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1170">
          <caret line="65" column="9" lean-forward="false" selection-start-line="65" selection-start-column="9" selection-end-line="65" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/ave40/push.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1098">
          <caret line="61" column="36" lean-forward="false" selection-start-line="61" selection-start-column="36" selection-end-line="61" selection-end-column="36" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/grapdata/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="162">
          <caret line="9" column="9" lean-forward="false" selection-start-line="9" selection-start-column="9" selection-end-line="9" selection-end-column="9" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/ave40/spinner.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="553">
          <caret line="90" column="31" lean-forward="true" selection-start-line="90" selection-start-column="31" selection-end-line="90" selection-end-column="31" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/ave40/grap_article.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-332">
          <caret line="29" column="52" lean-forward="true" selection-start-line="29" selection-start-column="52" selection-end-line="29" selection-end-column="52" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/learn/article.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="786">
          <caret line="236" column="0" lean-forward="true" selection-start-line="236" selection-start-column="0" selection-end-line="236" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>